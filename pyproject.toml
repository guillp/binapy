[tool]
[tool.poetry]
name = "binapy"
version = "0.8.0"
homepage = "https://github.com/guillp/binapy"
description = "Binary Data manipulation, for humans."
authors = ["Guillaume Pujol <guill.p.linux@gmail.com>"]
readme = "README.md"
license =  "MIT"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]
packages = [
    { include = "binapy" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.8"
typing-extensions = ">=4.3.0"

[tool.poetry.dev-dependencies]
coverage = ">=7.2.7"
livereload = ">=2.6.3"
mypy = ">=1.8.0"
mkdocs  = ">=1.5.3"
mkdocs-autorefs = ">=0.5.0"
mkdocs-material  = ">=9.5.4"
mkdocs-material-extensions  = ">=1.3.1"
mkdocstrings  = { version = ">=0.24.0", extras = ["python"] }
pre-commit = ">=3.5.0"
pytest  = ">=7.4.4"
pytest-mypy = ">=0.9.1"
pytest-cov  = ">=3.0.0"
ruff = ">=0.1.13"
toml = ">=0.10.2"
tox  = ">=4.12.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.docformatter]
recursive = true
wrap-summaries = 120
wrap-descriptions = 120
blank = true

[tool.mypy]
strict = true
implicit_reexport = true
pretty = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true



[tool.ruff]
target-version = "py38"
line-length = 120
select = [
    "A",
    "B",
    "C",
    "C4",
    "D",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "F",
    "FA",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PGH",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PTH",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "PLR2004", # Magic value used in comparison
    "D402", # First line should not be the function's signature
    "ISC001",
]
exclude = [
    "tests"
]

[tool.ruff.pydocstyle]
convention = "google"
ignore-decorators = ['override']


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def main",
    "...",
    "assert False",
    "pytest.skip",
    "pass",
]
