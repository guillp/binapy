{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BinaPy \u00b6 BinaPy is a module that makes Binary Data manipulation simpler and easier than what is offered in the Python standard library. With BinaPy, encoding or decoding data in a number of formats (base64, base64url, hex, url-encoding, etc.), compressing or decompressing (gzip), hashing (SHA1, SHA256, MD5, etc., with or without salt), is all a single method call away! And you can extend it with new formats and features. 1 2 3 4 5 6 7 8 9 from binapy import BinaPy bp = BinaPy ( \"Hello, World!\" ) . compress_gzip () . encode_b64u () print ( bp ) # b'eJzzSM3JyddRCM8vyklRBAAfngRq' bp . decode_b64u () . decompress_gzip () . decode () # \"Hello, World!\" isinstance ( bp , bytes ) # True Free software: MIT Documentation: https://guillp.github.io/binapy/ Features \u00b6 Fluent interface, based on a bytes subclass Provides a convenient interface over hashlib , base64 , gzip , urllib.parse , json and more Easy to extend with new formats TODO \u00b6 add more parsing formats like YAML, CBOR, etc. optionally use faster third-party modules when available Credits \u00b6 This package template was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#binapy","text":"BinaPy is a module that makes Binary Data manipulation simpler and easier than what is offered in the Python standard library. With BinaPy, encoding or decoding data in a number of formats (base64, base64url, hex, url-encoding, etc.), compressing or decompressing (gzip), hashing (SHA1, SHA256, MD5, etc., with or without salt), is all a single method call away! And you can extend it with new formats and features. 1 2 3 4 5 6 7 8 9 from binapy import BinaPy bp = BinaPy ( \"Hello, World!\" ) . compress_gzip () . encode_b64u () print ( bp ) # b'eJzzSM3JyddRCM8vyklRBAAfngRq' bp . decode_b64u () . decompress_gzip () . decode () # \"Hello, World!\" isinstance ( bp , bytes ) # True Free software: MIT Documentation: https://guillp.github.io/binapy/","title":"BinaPy"},{"location":"#features","text":"Fluent interface, based on a bytes subclass Provides a convenient interface over hashlib , base64 , gzip , urllib.parse , json and more Easy to extend with new formats","title":"Features"},{"location":"#todo","text":"add more parsing formats like YAML, CBOR, etc. optionally use faster third-party modules when available","title":"TODO"},{"location":"#credits","text":"This package template was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for BinaPy. binapy \u00b6 Main module. BinaPy \u00b6 This subclass of bytes exposes various binary data manipulation methods. Since this is a bytes subclass, you can use instances of BinaPy anywhere you can use bytes . BinaPy allows (re)encoding of data using encode_to(<format>) , decoding using decode_from(<format>) , parsing using parse_from(<format>) , and serialisation using serialize_to(<format>) . Actual transformations into formats such as Base64, JSON, etc. are implemented using Extensions. Those extensions are registered using the decorators binapy_encoder , binapy_decoder , binapy_checker , binapy_serializer , and binapy_parser . extensions : Dict [ str , Dict [ str , Callable [ ... , Any ]]] \u00b6 Extension registry. __add__ ( self , other ) special \u00b6 Override base method so that addition returns a BinaPy instead of bytes. Parameters: Name Type Description Default other bytes bytes or BinaPy to add required Returns: Type Description BinaPy a BinaPy Source code in binapy\\binapy.py def __add__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to add Returns: a BinaPy \"\"\" return self . __class__ ( super () . __add__ ( other )) __getitem__ ( self , slice ) special \u00b6 Override the base method so that slicing returns a BinaPy instead of just bytes. Parameters: Name Type Description Default index an index required Returns: Type Description Union[int, BinaPy] A BinaPy Source code in binapy\\binapy.py def __getitem__ ( self , slice : Union [ int , slice ]) -> \"Union[int, BinaPy]\" : \"\"\" Override the base method so that slicing returns a BinaPy instead of just bytes. Args: index: an index Returns: A BinaPy \"\"\" if isinstance ( slice , int ): return super () . __getitem__ ( slice ) return self . __class__ ( super () . __getitem__ ( slice )) __new__ ( cls , value = b '' , encoding = 'utf-8' , errors = 'strict' ) special staticmethod \u00b6 Overrides base method to accept a string with a default encoding of \"utf-8\". See Also: bytes constructor and str.encode() Parameters: Name Type Description Default value Union[bytes, str] a bytes or a str b'' encoding str if value is a str , specifies the encoding to use to encode this str to bytes 'utf-8' errors str 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' 'strict' Source code in binapy\\binapy.py def __new__ ( cls , value : Union [ bytes , str ] = b \"\" , encoding : str = \"utf-8\" , errors : str = \"strict\" , ) -> \"BinaPy\" : \"\"\" Overrides base method to accept a string with a default encoding of \"utf-8\". See Also: [`bytes` constructor](https://docs.python.org/3/library/stdtypes.html#bytes) and [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode) Args: value: a `bytes` or a `str` encoding: if value is a `str`, specifies the encoding to use to encode this str to bytes errors: 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' \"\"\" if isinstance ( value , str ): obj = bytes . __new__ ( cls , value , encoding = encoding , errors = errors ) else : obj = bytes . __new__ ( cls , value ) return obj __radd__ ( self , other ) special \u00b6 Override base method so that right addition returns a BinaPy instead of bytes. Parameters: Name Type Description Default other bytes bytes or BinaPy to radd required Returns: Type Description BinaPy a BinaPy Source code in binapy\\binapy.py def __radd__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that right addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to radd Returns: a BinaPy \"\"\" return self . __class__ ( other . __add__ ( self )) ascii ( self ) \u00b6 Convert this BinaPy to a str, making sure that only ascii characters are employed. Returns: a str Source code in binapy\\binapy.py def ascii ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only ascii characters are employed. Returns: a str \"\"\" return self . decode ( \"ascii\" ) char_at ( self , index ) \u00b6 Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Parameters: Name Type Description Default index int required Returns: Type Description str the single character at the given index Source code in binapy\\binapy.py def char_at ( self , index : int ) -> str : \"\"\" Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Args: index: Returns: the single character at the given index \"\"\" return chr ( self [ index ]) check ( self , name , decode = False , raise_on_error = False ) \u00b6 Check that this BinaPy conforms to a given extension format. Parameters: Name Type Description Default name str the name of the extension to check required decode bool if True, and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. False raise_on_error bool if True, Exceptions from the checker method, if any, will be raised instead of returning False. False Returns: Type Description bool a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. Source code in binapy\\binapy.py def check ( self , name : str , decode : bool = False , raise_on_error : bool = False ) -> bool : \"\"\" Check that this BinaPy conforms to a given extension format. Args: name: the name of the extension to check decode: if True, and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. raise_on_error: if True, Exceptions from the checker method, if any, will be raised instead of returning False. Returns: a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. \"\"\" # raises an exception in case the extension doesn't exist self . get_extension_methods ( name ) try : checker = self . get_checker ( name ) try : return checker ( self ) except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : try : decoder = self . get_decoder ( name ) # if checker is not implemented and decode is True, try to decode instead if decode and decoder : try : decoder ( self ) return True except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : return False return False check_all ( self , decode = False ) \u00b6 Check if this BinaPy conforms to any of the registered extensions. Returns: a list of extensions that this BinaPy can be decoded from. Parameters: Name Type Description Default decode bool if True, for extensions that don't have a checker method, try to decode this BinaPy using the decoder method to check if that works. False Source code in binapy\\binapy.py def check_all ( self , decode : bool = False ) -> List [ str ]: \"\"\" Check if this BinaPy conforms to any of the registered extensions. Returns: a list of extensions that this BinaPy can be decoded from. Args: decode: if True, for extensions that don't have a checker method, try to decode this BinaPy using the decoder method to check if that works. \"\"\" def get_results () -> Iterator [ str ]: for name in self . extensions : success = self . check ( name , decode = decode ) if success is True : yield name return list ( get_results ()) cut_at ( self , * pos ) \u00b6 Cut this BinaPy at one or more integer positions. Parameters: Name Type Description Default *pos int indexes where to cut the BinaPy () Returns: Type Description List[BinaPy] len(pos) + 1 parts, instances of BinaPy Source code in binapy\\binapy.py def cut_at ( self , * pos : int ) -> \"List[BinaPy]\" : \"\"\" Cut this BinaPy at one or more integer positions. Args: *pos: indexes where to cut the BinaPy Returns: `len(pos) + 1` parts, instances of BinaPy \"\"\" spos = sorted ( pos ) return [ self . __class__ ( self [ start : end ]) for start , end in zip ([ 0 ] + spos , spos + [ len ( self )]) ] decode_from ( self , name , * args , ** kwargs ) \u00b6 Decode data from this BinaPy according to the format name . Parameters: Name Type Description Default name str extension name to use required *args Any additional position parameters for the extension decoder method () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description BinaPy data as returned by the extension Source code in binapy\\binapy.py def decode_from ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Decode data from this BinaPy according to the format `name`. Args: name: extension name to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: data as returned by the extension \"\"\" decoder = self . get_decoder ( name ) return decoder ( self , * args , ** kwargs ) encode_to ( self , name , * args , ** kwargs ) \u00b6 Encode data from this BinaPy according to the extension format name . Parameters: Name Type Description Default name str extension name to use required *args Any additional position parameters for the extension encoder method () **kwargs Any additional keyword parameters for the extension encoder method {} Returns: Type Description BinaPy data as returned by the extension encoder method Source code in binapy\\binapy.py def encode_to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Encode data from this BinaPy according to the extension format `name`. Args: name: extension name to use *args: additional position parameters for the extension encoder method **kwargs: additional keyword parameters for the extension encoder method Returns: data as returned by the extension encoder method \"\"\" encoder = self . get_encoder ( name ) return encoder ( self , * args , ** kwargs ) from_binary_string ( s , byteorder = 'big' , signed = False ) classmethod \u00b6 Initializes a BinaPy based on a binary string (containing only 0 and 1). Parameters: Name Type Description Default s str a binary string required byteorder Literal['little', 'big'] byte order to use 'big' signed bool True if 2 complement is used to represent negative values False Returns: Type Description BinaPy a BinaPy Source code in binapy\\binapy.py @classmethod def from_binary_string ( cls , s : str , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> \"BinaPy\" : \"\"\" Initializes a BinaPy based on a binary string (containing only 0 and 1). Args: s: a binary string byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a BinaPy \"\"\" return cls ( int ( s , 2 ) . to_bytes (( len ( s ) + 7 ) // 8 , byteorder = byteorder , signed = signed ) ) from_int ( i , length = None , byteorder = 'big' , signed = False ) classmethod \u00b6 Convert an int to a BinaPy . This is a wrapper around int.to_bytes() and takes the same parameters. Parameters: Name Type Description Default i int the integer to convert to BinaPy required length Optional[int] the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. None byteorder Literal['little', 'big'] \"little\" or \"big\" (defaults to \"big\") 'big' signed bool determines whether two\u2019s complement is used to represent the integer. False Returns: Type Description BinaPy a BinaPy with the binary representation of the given integer Source code in binapy\\binapy.py @classmethod def from_int ( cls , i : int , length : Optional [ int ] = None , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False , ) -> \"BinaPy\" : \"\"\" Convert an `int` to a `BinaPy`. This is a wrapper around [int.to_bytes()](https://docs.python.org/3/library/stdtypes.html#int.to_bytes) and takes the same parameters. Args: i: the integer to convert to BinaPy length: the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u2019s complement is used to represent the integer. Returns: a BinaPy with the binary representation of the given integer \"\"\" if length is None : length = ( i . bit_length () + 7 ) // 8 data = i . to_bytes ( length , byteorder , signed = signed ) return cls ( data ) parse_from ( self , name , * args , ** kwargs ) \u00b6 Parse data from this BinaPy, based on a given extension format. Parameters: Name Type Description Default name str name of the extension to use required *args Any additional position parameters for the extension decoder method () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description Any the result from parsing this BinaPy Source code in binapy\\binapy.py def parse_from ( self , name : str , * args : Any , ** kwargs : Any ) -> Any : \"\"\" Parse data from this BinaPy, based on a given extension format. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the result from parsing this BinaPy \"\"\" parser = self . get_parser ( name ) return parser ( self , * args , ** kwargs ) random ( length ) classmethod \u00b6 Return a BinaPy containing length random bytes Parameters: Name Type Description Default length int number of bytes to generate required Returns: Type Description BinaPy a BinaPy with randomly generated data Source code in binapy\\binapy.py @classmethod def random ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bytes Args: length: number of bytes to generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length )) random_bits ( length ) classmethod \u00b6 Return a BinaPy containing length random bits. Same as random(length//8). Length must be a multiple of 8. Parameters: Name Type Description Default length int number of bits to randomly generate required Returns: Type Description BinaPy a BinaPy with randomly generated data Source code in binapy\\binapy.py @classmethod def random_bits ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bits. Same as random(length//8). Length must be a multiple of 8. Args: length: number of bits to randomly generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length // 8 )) serialize_to ( name , * args , ** kwargs ) classmethod \u00b6 Serialize (dump) data to a BinaPy, based on a given extension format. Parameters: Name Type Description Default name str name of the extension to use required *args Any additional position parameters for the extension decoder method (which includes the data to serialize) () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description BinaPy a BinaPy, resulting from serialization of the data Source code in binapy\\binapy.py @classmethod def serialize_to ( cls , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Serialize (dump) data to a BinaPy, based on a given extension format. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method (which includes the data to serialize) **kwargs: additional keyword parameters for the extension decoder method Returns: a BinaPy, resulting from serialization of the data \"\"\" serializer = cls . get_serializer ( name ) return serializer ( * args , ** kwargs ) split ( self , sep = None , maxsplit =- 1 ) \u00b6 Override base method so that split() returns a BinaPy instead of bytes. Parameters: Name Type Description Default sep Optional[bytes] a separator None maxsplit int the maximum number of splits -1 Returns: Type Description List[BinaPy] a BinaPy Source code in binapy\\binapy.py def split ( self , sep : Optional [ bytes ] = None , maxsplit : int = - 1 ) -> \"List[BinaPy]\" : # type: ignore[override] \"\"\" Override base method so that split() returns a BinaPy instead of bytes. Args: sep: a separator maxsplit: the maximum number of splits Returns: a BinaPy \"\"\" return [ self . __class__ ( b ) for b in super () . split ( sep , maxsplit )] to_binary_string ( self , byteorder = 'big' , signed = False ) \u00b6 Returns a string containing this this BinaPy in binary representation. Parameters: Name Type Description Default byteorder Literal['little', 'big'] byte order to use 'big' signed bool True if 2 complement is used to represent negative values False Returns: Type Description str a string with containing only 0 and 1 Source code in binapy\\binapy.py def to_binary_string ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> str : \"\"\" Returns a string containing this this BinaPy in binary representation. Args: byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a string with containing only 0 and 1 \"\"\" return f \" { self . to_int ( byteorder , signed ) : b } \" to_int ( self , byteorder = 'big' , signed = False ) \u00b6 Convert this BinaPy to an int . This is a wrapper around int.from_bytes() and takes the same parameters. Parameters: Name Type Description Default byteorder Literal['little', 'big'] \"little\" or \"big\" (defaults to \"big\") 'big' signed bool determines whether two\u2019s complement is used to represent the integer. Default to False. False Returns: Type Description int an integer based on this BinaPy binary value Source code in binapy\\binapy.py def to_int ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> int : \"\"\" Convert this BinaPy to an `int`. This is a wrapper around [int.from_bytes()](https://docs.python.org/3/library/stdtypes.html#int.from_bytes) and takes the same parameters. Args: byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u2019s complement is used to represent the integer. Default to False. Returns: an integer based on this BinaPy binary value \"\"\" return int . from_bytes ( self , byteorder , signed = signed )","title":"API"},{"location":"api/#binapy.binapy","text":"Main module.","title":"binapy"},{"location":"api/#binapy.binapy.BinaPy","text":"This subclass of bytes exposes various binary data manipulation methods. Since this is a bytes subclass, you can use instances of BinaPy anywhere you can use bytes . BinaPy allows (re)encoding of data using encode_to(<format>) , decoding using decode_from(<format>) , parsing using parse_from(<format>) , and serialisation using serialize_to(<format>) . Actual transformations into formats such as Base64, JSON, etc. are implemented using Extensions. Those extensions are registered using the decorators binapy_encoder , binapy_decoder , binapy_checker , binapy_serializer , and binapy_parser .","title":"BinaPy"},{"location":"api/#binapy.binapy.BinaPy.extensions","text":"Extension registry.","title":"extensions"},{"location":"api/#binapy.binapy.BinaPy.__add__","text":"Override base method so that addition returns a BinaPy instead of bytes. Parameters: Name Type Description Default other bytes bytes or BinaPy to add required Returns: Type Description BinaPy a BinaPy Source code in binapy\\binapy.py def __add__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to add Returns: a BinaPy \"\"\" return self . __class__ ( super () . __add__ ( other ))","title":"__add__()"},{"location":"api/#binapy.binapy.BinaPy.__getitem__","text":"Override the base method so that slicing returns a BinaPy instead of just bytes. Parameters: Name Type Description Default index an index required Returns: Type Description Union[int, BinaPy] A BinaPy Source code in binapy\\binapy.py def __getitem__ ( self , slice : Union [ int , slice ]) -> \"Union[int, BinaPy]\" : \"\"\" Override the base method so that slicing returns a BinaPy instead of just bytes. Args: index: an index Returns: A BinaPy \"\"\" if isinstance ( slice , int ): return super () . __getitem__ ( slice ) return self . __class__ ( super () . __getitem__ ( slice ))","title":"__getitem__()"},{"location":"api/#binapy.binapy.BinaPy.__new__","text":"Overrides base method to accept a string with a default encoding of \"utf-8\". See Also: bytes constructor and str.encode() Parameters: Name Type Description Default value Union[bytes, str] a bytes or a str b'' encoding str if value is a str , specifies the encoding to use to encode this str to bytes 'utf-8' errors str 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' 'strict' Source code in binapy\\binapy.py def __new__ ( cls , value : Union [ bytes , str ] = b \"\" , encoding : str = \"utf-8\" , errors : str = \"strict\" , ) -> \"BinaPy\" : \"\"\" Overrides base method to accept a string with a default encoding of \"utf-8\". See Also: [`bytes` constructor](https://docs.python.org/3/library/stdtypes.html#bytes) and [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode) Args: value: a `bytes` or a `str` encoding: if value is a `str`, specifies the encoding to use to encode this str to bytes errors: 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' \"\"\" if isinstance ( value , str ): obj = bytes . __new__ ( cls , value , encoding = encoding , errors = errors ) else : obj = bytes . __new__ ( cls , value ) return obj","title":"__new__()"},{"location":"api/#binapy.binapy.BinaPy.__radd__","text":"Override base method so that right addition returns a BinaPy instead of bytes. Parameters: Name Type Description Default other bytes bytes or BinaPy to radd required Returns: Type Description BinaPy a BinaPy Source code in binapy\\binapy.py def __radd__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that right addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to radd Returns: a BinaPy \"\"\" return self . __class__ ( other . __add__ ( self ))","title":"__radd__()"},{"location":"api/#binapy.binapy.BinaPy.ascii","text":"Convert this BinaPy to a str, making sure that only ascii characters are employed. Returns: a str Source code in binapy\\binapy.py def ascii ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only ascii characters are employed. Returns: a str \"\"\" return self . decode ( \"ascii\" )","title":"ascii()"},{"location":"api/#binapy.binapy.BinaPy.char_at","text":"Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Parameters: Name Type Description Default index int required Returns: Type Description str the single character at the given index Source code in binapy\\binapy.py def char_at ( self , index : int ) -> str : \"\"\" Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Args: index: Returns: the single character at the given index \"\"\" return chr ( self [ index ])","title":"char_at()"},{"location":"api/#binapy.binapy.BinaPy.check","text":"Check that this BinaPy conforms to a given extension format. Parameters: Name Type Description Default name str the name of the extension to check required decode bool if True, and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. False raise_on_error bool if True, Exceptions from the checker method, if any, will be raised instead of returning False. False Returns: Type Description bool a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. Source code in binapy\\binapy.py def check ( self , name : str , decode : bool = False , raise_on_error : bool = False ) -> bool : \"\"\" Check that this BinaPy conforms to a given extension format. Args: name: the name of the extension to check decode: if True, and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. raise_on_error: if True, Exceptions from the checker method, if any, will be raised instead of returning False. Returns: a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. \"\"\" # raises an exception in case the extension doesn't exist self . get_extension_methods ( name ) try : checker = self . get_checker ( name ) try : return checker ( self ) except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : try : decoder = self . get_decoder ( name ) # if checker is not implemented and decode is True, try to decode instead if decode and decoder : try : decoder ( self ) return True except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : return False return False","title":"check()"},{"location":"api/#binapy.binapy.BinaPy.check_all","text":"Check if this BinaPy conforms to any of the registered extensions. Returns: a list of extensions that this BinaPy can be decoded from. Parameters: Name Type Description Default decode bool if True, for extensions that don't have a checker method, try to decode this BinaPy using the decoder method to check if that works. False Source code in binapy\\binapy.py def check_all ( self , decode : bool = False ) -> List [ str ]: \"\"\" Check if this BinaPy conforms to any of the registered extensions. Returns: a list of extensions that this BinaPy can be decoded from. Args: decode: if True, for extensions that don't have a checker method, try to decode this BinaPy using the decoder method to check if that works. \"\"\" def get_results () -> Iterator [ str ]: for name in self . extensions : success = self . check ( name , decode = decode ) if success is True : yield name return list ( get_results ())","title":"check_all()"},{"location":"api/#binapy.binapy.BinaPy.cut_at","text":"Cut this BinaPy at one or more integer positions. Parameters: Name Type Description Default *pos int indexes where to cut the BinaPy () Returns: Type Description List[BinaPy] len(pos) + 1 parts, instances of BinaPy Source code in binapy\\binapy.py def cut_at ( self , * pos : int ) -> \"List[BinaPy]\" : \"\"\" Cut this BinaPy at one or more integer positions. Args: *pos: indexes where to cut the BinaPy Returns: `len(pos) + 1` parts, instances of BinaPy \"\"\" spos = sorted ( pos ) return [ self . __class__ ( self [ start : end ]) for start , end in zip ([ 0 ] + spos , spos + [ len ( self )]) ]","title":"cut_at()"},{"location":"api/#binapy.binapy.BinaPy.decode_from","text":"Decode data from this BinaPy according to the format name . Parameters: Name Type Description Default name str extension name to use required *args Any additional position parameters for the extension decoder method () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description BinaPy data as returned by the extension Source code in binapy\\binapy.py def decode_from ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Decode data from this BinaPy according to the format `name`. Args: name: extension name to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: data as returned by the extension \"\"\" decoder = self . get_decoder ( name ) return decoder ( self , * args , ** kwargs )","title":"decode_from()"},{"location":"api/#binapy.binapy.BinaPy.encode_to","text":"Encode data from this BinaPy according to the extension format name . Parameters: Name Type Description Default name str extension name to use required *args Any additional position parameters for the extension encoder method () **kwargs Any additional keyword parameters for the extension encoder method {} Returns: Type Description BinaPy data as returned by the extension encoder method Source code in binapy\\binapy.py def encode_to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Encode data from this BinaPy according to the extension format `name`. Args: name: extension name to use *args: additional position parameters for the extension encoder method **kwargs: additional keyword parameters for the extension encoder method Returns: data as returned by the extension encoder method \"\"\" encoder = self . get_encoder ( name ) return encoder ( self , * args , ** kwargs )","title":"encode_to()"},{"location":"api/#binapy.binapy.BinaPy.from_binary_string","text":"Initializes a BinaPy based on a binary string (containing only 0 and 1). Parameters: Name Type Description Default s str a binary string required byteorder Literal['little', 'big'] byte order to use 'big' signed bool True if 2 complement is used to represent negative values False Returns: Type Description BinaPy a BinaPy Source code in binapy\\binapy.py @classmethod def from_binary_string ( cls , s : str , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> \"BinaPy\" : \"\"\" Initializes a BinaPy based on a binary string (containing only 0 and 1). Args: s: a binary string byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a BinaPy \"\"\" return cls ( int ( s , 2 ) . to_bytes (( len ( s ) + 7 ) // 8 , byteorder = byteorder , signed = signed ) )","title":"from_binary_string()"},{"location":"api/#binapy.binapy.BinaPy.from_int","text":"Convert an int to a BinaPy . This is a wrapper around int.to_bytes() and takes the same parameters. Parameters: Name Type Description Default i int the integer to convert to BinaPy required length Optional[int] the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. None byteorder Literal['little', 'big'] \"little\" or \"big\" (defaults to \"big\") 'big' signed bool determines whether two\u2019s complement is used to represent the integer. False Returns: Type Description BinaPy a BinaPy with the binary representation of the given integer Source code in binapy\\binapy.py @classmethod def from_int ( cls , i : int , length : Optional [ int ] = None , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False , ) -> \"BinaPy\" : \"\"\" Convert an `int` to a `BinaPy`. This is a wrapper around [int.to_bytes()](https://docs.python.org/3/library/stdtypes.html#int.to_bytes) and takes the same parameters. Args: i: the integer to convert to BinaPy length: the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u2019s complement is used to represent the integer. Returns: a BinaPy with the binary representation of the given integer \"\"\" if length is None : length = ( i . bit_length () + 7 ) // 8 data = i . to_bytes ( length , byteorder , signed = signed ) return cls ( data )","title":"from_int()"},{"location":"api/#binapy.binapy.BinaPy.parse_from","text":"Parse data from this BinaPy, based on a given extension format. Parameters: Name Type Description Default name str name of the extension to use required *args Any additional position parameters for the extension decoder method () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description Any the result from parsing this BinaPy Source code in binapy\\binapy.py def parse_from ( self , name : str , * args : Any , ** kwargs : Any ) -> Any : \"\"\" Parse data from this BinaPy, based on a given extension format. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the result from parsing this BinaPy \"\"\" parser = self . get_parser ( name ) return parser ( self , * args , ** kwargs )","title":"parse_from()"},{"location":"api/#binapy.binapy.BinaPy.random","text":"Return a BinaPy containing length random bytes Parameters: Name Type Description Default length int number of bytes to generate required Returns: Type Description BinaPy a BinaPy with randomly generated data Source code in binapy\\binapy.py @classmethod def random ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bytes Args: length: number of bytes to generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length ))","title":"random()"},{"location":"api/#binapy.binapy.BinaPy.random_bits","text":"Return a BinaPy containing length random bits. Same as random(length//8). Length must be a multiple of 8. Parameters: Name Type Description Default length int number of bits to randomly generate required Returns: Type Description BinaPy a BinaPy with randomly generated data Source code in binapy\\binapy.py @classmethod def random_bits ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bits. Same as random(length//8). Length must be a multiple of 8. Args: length: number of bits to randomly generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length // 8 ))","title":"random_bits()"},{"location":"api/#binapy.binapy.BinaPy.serialize_to","text":"Serialize (dump) data to a BinaPy, based on a given extension format. Parameters: Name Type Description Default name str name of the extension to use required *args Any additional position parameters for the extension decoder method (which includes the data to serialize) () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description BinaPy a BinaPy, resulting from serialization of the data Source code in binapy\\binapy.py @classmethod def serialize_to ( cls , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Serialize (dump) data to a BinaPy, based on a given extension format. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method (which includes the data to serialize) **kwargs: additional keyword parameters for the extension decoder method Returns: a BinaPy, resulting from serialization of the data \"\"\" serializer = cls . get_serializer ( name ) return serializer ( * args , ** kwargs )","title":"serialize_to()"},{"location":"api/#binapy.binapy.BinaPy.split","text":"Override base method so that split() returns a BinaPy instead of bytes. Parameters: Name Type Description Default sep Optional[bytes] a separator None maxsplit int the maximum number of splits -1 Returns: Type Description List[BinaPy] a BinaPy Source code in binapy\\binapy.py def split ( self , sep : Optional [ bytes ] = None , maxsplit : int = - 1 ) -> \"List[BinaPy]\" : # type: ignore[override] \"\"\" Override base method so that split() returns a BinaPy instead of bytes. Args: sep: a separator maxsplit: the maximum number of splits Returns: a BinaPy \"\"\" return [ self . __class__ ( b ) for b in super () . split ( sep , maxsplit )]","title":"split()"},{"location":"api/#binapy.binapy.BinaPy.to_binary_string","text":"Returns a string containing this this BinaPy in binary representation. Parameters: Name Type Description Default byteorder Literal['little', 'big'] byte order to use 'big' signed bool True if 2 complement is used to represent negative values False Returns: Type Description str a string with containing only 0 and 1 Source code in binapy\\binapy.py def to_binary_string ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> str : \"\"\" Returns a string containing this this BinaPy in binary representation. Args: byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a string with containing only 0 and 1 \"\"\" return f \" { self . to_int ( byteorder , signed ) : b } \"","title":"to_binary_string()"},{"location":"api/#binapy.binapy.BinaPy.to_int","text":"Convert this BinaPy to an int . This is a wrapper around int.from_bytes() and takes the same parameters. Parameters: Name Type Description Default byteorder Literal['little', 'big'] \"little\" or \"big\" (defaults to \"big\") 'big' signed bool determines whether two\u2019s complement is used to represent the integer. Default to False. False Returns: Type Description int an integer based on this BinaPy binary value Source code in binapy\\binapy.py def to_int ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> int : \"\"\" Convert this BinaPy to an `int`. This is a wrapper around [int.from_bytes()](https://docs.python.org/3/library/stdtypes.html#int.from_bytes) and takes the same parameters. Args: byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u2019s complement is used to represent the integer. Default to False. Returns: an integer based on this BinaPy binary value \"\"\" return int . from_bytes ( self , byteorder , signed = signed )","title":"to_int()"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Guillaume Pujol guill.p.linux@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Guillaume Pujol guill.p.linux@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/guillp/binapy/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 BinaPy could always use more documentation, whether as part of the official BinaPy docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/guillp/binapy/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up binapy for local development. Fork the binapy repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/binapy.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/guillp/binapy/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 To run a subset of tests, here only those from test_binapy : 1 $ pytest tests.test_binapy Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/guillp/binapy/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"BinaPy could always use more documentation, whether as part of the official BinaPy docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/guillp/binapy/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up binapy for local development. Fork the binapy repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/binapy.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/guillp/binapy/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests, here only those from test_binapy : 1 $ pytest tests.test_binapy","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.3.0 (2021-11-15) \u00b6 Renaming serialize_from() to serialize_to() and parse_to() to parse_from() . 0.2.0 (2021-11-10) \u00b6 Serialize JSON as compact by default datetime instances are serialized to epoch timestamps when serializing JSON (but they are not converted back on parsing). add .to_int() to convert a BinaPy to an int. 0.1.0 (2021-07-08) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#030-2021-11-15","text":"Renaming serialize_from() to serialize_to() and parse_to() to parse_from() .","title":"0.3.0 (2021-11-15)"},{"location":"history/#020-2021-11-10","text":"Serialize JSON as compact by default datetime instances are serialized to epoch timestamps when serializing JSON (but they are not converted back on parsing). add .to_int() to convert a BinaPy to an int.","title":"0.2.0 (2021-11-10)"},{"location":"history/#010-2021-07-08","text":"First release on PyPI.","title":"0.1.0 (2021-07-08)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install BinaPy, run this command in your terminal: 1 $ pip install binapy This is the preferred method to install BinaPy, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for BinaPy can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/guillp/binapy Or download the tarball : 1 $ curl -OJL https://github.com/guillp/binapy/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install BinaPy, run this command in your terminal: 1 $ pip install binapy This is the preferred method to install BinaPy, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for BinaPy can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/guillp/binapy Or download the tarball : 1 $ curl -OJL https://github.com/guillp/binapy/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 import \u00b6 To use BinaPy in a project, import the main class like this: 1 from binapy import BinaPy BinaPy is a subclass of Python's built-in bytes , so you can use it anywhere a bytes is required. You may also .decode() it to convert it to a str , or use any of the default methods from bytes It also provides a few additional convenience methods such as cut_at(*pos) initialize \u00b6 To initialize a BinaPy : from a bytes : bp = BinaPy(b'my raw bytes \\x01\\xcf' ) from a str : bp = BinaPy(\"my string\", encoding='cp1252') . If encoding is omitted, it will default to 'utf-8' . That is a different to the bytes constructor where encoding is mandatory when you give it a str as value. from a bytearray : bp = BinaPy(bytearray(b'my bytearray data')) from an int array: bp = BinaPy([109, 121, 32, 105, 110, 116, 32, 97, 114, 114, 97, 121]) from an int : bp = BinaPy.from_int(82412341) . You may additionally pass size , order , and signed parameters, with the same semantics as int.to_bytes((length, byteorder, signed=False) . You can do the opposite and convert an BinaPy to an int with bp.to_int() . with random data, of arbitrary size: bp = BinaPy.random(32) . The parameter is the size of the generated data, in bytes. from a string containing the binary representation of your data: bp = BinaPy.from_binary_string('101010') . The reverse transformation is available with bp.to_binary_string() . transform \u00b6 Extensions provide a fluent interface to apply transformations on a BinaPy. For example, to generate a random binary data, hash it with SHA256 then base64url encode the result: 1 2 3 bp = BinaPy . random ( 128 ) . hash_sha256 () . encode_b64u () print ( bp ) # b'QTs64tuMZ-TnyYPhjopIryaFPeF26SKKN4y-su2sBYg' Methods that handle encoding or decoding of data return another BinaPy, which makes it possible to chain calls with multiple transformations. check \u00b6 You can check if a BinaPy data conforms with a given extension using the .check(name) method. 1 2 3 4 5 bp = BinaPy ( b \"ThisIsData==\" ) bp . check ( \"b64\" ) # True bp . check ( \"hex\" ) # False You can also check a BinaPy against all extensions using .check_all() . For example, any random 20 bytes could be the result from a SHA1 hash: 1 2 3 bp = BinaPy . random ( 20 ) bp . check_all () # ['sha1'] While a given string with only hex characters could be a hexadecimal string, it could also be the result of a base64 or a base64url encoding. 1 2 3 4 bp = BinaPy ( \"abcdef1234567890\" ) bp . check_all () # ['b64', 'b64u', 'hex'] # ['b64', 'b64u', 'hex'] load and dump \u00b6 Dumping and encoding data can be done this way: 1 2 BinaPy . from_json ({ \"foo\" : \"bar\" }) . encode_b64u () # b'ewoiZm9vIjogImJhciIKfQ' Loading serialized and encoded data can be done this way: 1 2 BinaPy ( b \"ewoiZm9vIjogImJhciIKfQ\" ) . decode_b64u () . parse_json () # {'foo': 'bar'} extend \u00b6 You can implement additional methods for BinaPy. Methods can implement one or several of the following features: an encoder : this will transform/encode the current BinaPy into another BinaPy. E.g., a base64 encoder will transform arbitrary binary data into a base64 encoded string. a decoder : this will transform an encoded data back into its initial data. E.g., a base64 decoder. a checker : this will check if a given data conforms to a given format. Which means that this data could have been produced with a matching encoder and can probably be decoded with the matching decoder , if available. a parser : this will parse the current BinaPy data into another format. E.g., a JSON parser a serializer : this will serialize data from another format into a BinaPy. E.g, a JSON dumper Note that the terms encode and decode are quite loose, because they are applied to compression, hashing and other transformations that produce or consume binary data. To implement such a method, use one of the binapy_<feature>() decorator. It takes the name of the extension as parameter. 1 2 3 4 5 6 7 from binapy import binapy_encoder @binapy_encoder ( \"myformat\" ) def encode_myformat ( bp ) -> bytes : # apply your transformation return my_transformation ( bp ) This binapy_encoder() decorator will: register this method in BinaPy extension registry, so that it can be called with BinaPy(my_data).encode_to('myformat') . add this method to BinaPy with a setattr() , so that it can be called with BinaPy(my_data).encode_myformat() (same name as the decorated method). if that methods returns a bytes or a bytesarray , make sure that it returns a BinaPy instead, to make sure it is fluent. Some formats such as base64 can have all 3 methods implemented. Others such as hashes only have an encoder and checker method: the encoder does the actual hashing (that is, by definition, irreversible) the checker method checks that a given data is the appropriate length for the given hash Finally, some formats like gzip do not have a checker method, because trying to decode the data is faster and easier than validating it statically. BinaPy will then try the decode method instead and see if it raises an Exception.","title":"usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#import","text":"To use BinaPy in a project, import the main class like this: 1 from binapy import BinaPy BinaPy is a subclass of Python's built-in bytes , so you can use it anywhere a bytes is required. You may also .decode() it to convert it to a str , or use any of the default methods from bytes It also provides a few additional convenience methods such as cut_at(*pos)","title":"import"},{"location":"usage/#initialize","text":"To initialize a BinaPy : from a bytes : bp = BinaPy(b'my raw bytes \\x01\\xcf' ) from a str : bp = BinaPy(\"my string\", encoding='cp1252') . If encoding is omitted, it will default to 'utf-8' . That is a different to the bytes constructor where encoding is mandatory when you give it a str as value. from a bytearray : bp = BinaPy(bytearray(b'my bytearray data')) from an int array: bp = BinaPy([109, 121, 32, 105, 110, 116, 32, 97, 114, 114, 97, 121]) from an int : bp = BinaPy.from_int(82412341) . You may additionally pass size , order , and signed parameters, with the same semantics as int.to_bytes((length, byteorder, signed=False) . You can do the opposite and convert an BinaPy to an int with bp.to_int() . with random data, of arbitrary size: bp = BinaPy.random(32) . The parameter is the size of the generated data, in bytes. from a string containing the binary representation of your data: bp = BinaPy.from_binary_string('101010') . The reverse transformation is available with bp.to_binary_string() .","title":"initialize"},{"location":"usage/#transform","text":"Extensions provide a fluent interface to apply transformations on a BinaPy. For example, to generate a random binary data, hash it with SHA256 then base64url encode the result: 1 2 3 bp = BinaPy . random ( 128 ) . hash_sha256 () . encode_b64u () print ( bp ) # b'QTs64tuMZ-TnyYPhjopIryaFPeF26SKKN4y-su2sBYg' Methods that handle encoding or decoding of data return another BinaPy, which makes it possible to chain calls with multiple transformations.","title":"transform"},{"location":"usage/#check","text":"You can check if a BinaPy data conforms with a given extension using the .check(name) method. 1 2 3 4 5 bp = BinaPy ( b \"ThisIsData==\" ) bp . check ( \"b64\" ) # True bp . check ( \"hex\" ) # False You can also check a BinaPy against all extensions using .check_all() . For example, any random 20 bytes could be the result from a SHA1 hash: 1 2 3 bp = BinaPy . random ( 20 ) bp . check_all () # ['sha1'] While a given string with only hex characters could be a hexadecimal string, it could also be the result of a base64 or a base64url encoding. 1 2 3 4 bp = BinaPy ( \"abcdef1234567890\" ) bp . check_all () # ['b64', 'b64u', 'hex'] # ['b64', 'b64u', 'hex']","title":"check"},{"location":"usage/#load-and-dump","text":"Dumping and encoding data can be done this way: 1 2 BinaPy . from_json ({ \"foo\" : \"bar\" }) . encode_b64u () # b'ewoiZm9vIjogImJhciIKfQ' Loading serialized and encoded data can be done this way: 1 2 BinaPy ( b \"ewoiZm9vIjogImJhciIKfQ\" ) . decode_b64u () . parse_json () # {'foo': 'bar'}","title":"load and dump"},{"location":"usage/#extend","text":"You can implement additional methods for BinaPy. Methods can implement one or several of the following features: an encoder : this will transform/encode the current BinaPy into another BinaPy. E.g., a base64 encoder will transform arbitrary binary data into a base64 encoded string. a decoder : this will transform an encoded data back into its initial data. E.g., a base64 decoder. a checker : this will check if a given data conforms to a given format. Which means that this data could have been produced with a matching encoder and can probably be decoded with the matching decoder , if available. a parser : this will parse the current BinaPy data into another format. E.g., a JSON parser a serializer : this will serialize data from another format into a BinaPy. E.g, a JSON dumper Note that the terms encode and decode are quite loose, because they are applied to compression, hashing and other transformations that produce or consume binary data. To implement such a method, use one of the binapy_<feature>() decorator. It takes the name of the extension as parameter. 1 2 3 4 5 6 7 from binapy import binapy_encoder @binapy_encoder ( \"myformat\" ) def encode_myformat ( bp ) -> bytes : # apply your transformation return my_transformation ( bp ) This binapy_encoder() decorator will: register this method in BinaPy extension registry, so that it can be called with BinaPy(my_data).encode_to('myformat') . add this method to BinaPy with a setattr() , so that it can be called with BinaPy(my_data).encode_myformat() (same name as the decorated method). if that methods returns a bytes or a bytesarray , make sure that it returns a BinaPy instead, to make sure it is fluent. Some formats such as base64 can have all 3 methods implemented. Others such as hashes only have an encoder and checker method: the encoder does the actual hashing (that is, by definition, irreversible) the checker method checks that a given data is the appropriate length for the given hash Finally, some formats like gzip do not have a checker method, because trying to decode the data is faster and easier than validating it statically. BinaPy will then try the decode method instead and see if it raises an Exception.","title":"extend"}]}