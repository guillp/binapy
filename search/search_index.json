{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BinaPy \u00b6 BinaPy is a module that makes Binary Data manipulation simpler and easier than what is offered in the Python standard library. With BinaPy, encoding or decoding data in a number of formats (base64, base64url, hex, url-encoding, etc.), compressing or decompressing (gzip), hashing (SHA1, SHA256, MD5, etc., with or without salt), is all a single method call away! And you can extend it with new formats and features. 1 2 3 4 5 6 7 8 9 from binapy import BinaPy bp = BinaPy ( \"Hello, World!\" ) . to ( \"gzip\" ) . to ( \"b64u\" ) print ( bp ) # b'eJzzSM3JyddRCM8vyklRBAAfngRq' bp . decode_from ( \"b64u\" ) . decode_from ( \"gzip\" ) . decode () # \"Hello, World!\" isinstance ( bp , bytes ) # True Free software: MIT Documentation: https://guillp.github.io/binapy/ Features \u00b6 Fluent interface, based on a bytes subclass Provides a convenient interface over hashlib , base64 , gzip , urllib.parse , json and more Easy to extend with new formats TODO \u00b6 add more parsing formats like YAML, CBOR, etc. optionally use faster third-party modules when available Credits \u00b6 This package template was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#binapy","text":"BinaPy is a module that makes Binary Data manipulation simpler and easier than what is offered in the Python standard library. With BinaPy, encoding or decoding data in a number of formats (base64, base64url, hex, url-encoding, etc.), compressing or decompressing (gzip), hashing (SHA1, SHA256, MD5, etc., with or without salt), is all a single method call away! And you can extend it with new formats and features. 1 2 3 4 5 6 7 8 9 from binapy import BinaPy bp = BinaPy ( \"Hello, World!\" ) . to ( \"gzip\" ) . to ( \"b64u\" ) print ( bp ) # b'eJzzSM3JyddRCM8vyklRBAAfngRq' bp . decode_from ( \"b64u\" ) . decode_from ( \"gzip\" ) . decode () # \"Hello, World!\" isinstance ( bp , bytes ) # True Free software: MIT Documentation: https://guillp.github.io/binapy/","title":"BinaPy"},{"location":"#features","text":"Fluent interface, based on a bytes subclass Provides a convenient interface over hashlib , base64 , gzip , urllib.parse , json and more Easy to extend with new formats","title":"Features"},{"location":"#todo","text":"add more parsing formats like YAML, CBOR, etc. optionally use faster third-party modules when available","title":"TODO"},{"location":"#credits","text":"This package template was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"binapy \u00b6 Top-level package for BinaPy. binapy \u00b6 Main module. BinaPy ( bytes ) \u00b6 This subclass of bytes exposes various binary data manipulation methods. Since this is a bytes subclass, you can use instances of BinaPy anywhere you can use bytes . BinaPy allows (re)encoding of data using encode_to(<format>) , decoding using decode_from(<format>) , parsing using parse_from(<format>) , and serialisation using serialize_to(<format>) . Actual transformations into formats such as Base64, JSON, etc. are implemented using Extensions. Those extensions are registered using the decorators binapy_encoder , binapy_decoder , binapy_checker , binapy_serializer , and binapy_parser . Source code in binapy\\binapy.pyclass BinaPy ( bytes ): \"\"\" This subclass of `bytes` exposes various binary data manipulation methods. Since this is a `bytes` subclass, you can use instances of `BinaPy` anywhere you can use `bytes`. BinaPy allows (re)encoding of data using `encode_to(<format>)`, decoding using `decode_from(<format>)`, parsing using `parse_from(<format>)`, and serialisation using `serialize_to(<format>)`. Actual transformations into formats such as Base64, JSON, etc. are implemented using Extensions. Those extensions are registered using the decorators `binapy_encoder`, `binapy_decoder`, `binapy_checker`, `binapy_serializer`, and `binapy_parser`. \"\"\" def __new__ ( cls , value : Union [ bytes , str , int ] = b \"\" , encoding : str = \"utf-8\" , errors : str = \"strict\" , ) -> \"BinaPy\" : \"\"\" Overrides base method to accept a string with a default encoding of \"utf-8\". See Also: [`bytes` constructor](https://docs.python.org/3/library/stdtypes.html#bytes) and [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode) Args: value: a `bytes` or a `str` encoding: if value is a `str`, specifies the encoding to use to encode this str to bytes errors: 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' \"\"\" if isinstance ( value , str ): obj = bytes . __new__ ( cls , value , encoding = encoding , errors = errors ) else : obj = bytes . __new__ ( cls , value ) return obj @classmethod def from_int ( cls , i : int , length : Optional [ int ] = None , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False , ) -> \"BinaPy\" : \"\"\" Convert an `int` to a `BinaPy`. This is a wrapper around [int.to_bytes()](https://docs.python.org/3/library/stdtypes.html#int.to_bytes) and takes the same parameters. Args: i: the integer to convert to BinaPy length: the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Returns: a BinaPy with the binary representation of the given integer \"\"\" if length is None : length = ( i . bit_length () + 7 ) // 8 data = i . to_bytes ( length , byteorder , signed = signed ) return cls ( data ) def ascii ( self ) -> str : \"\"\" Decode this BinaPy to a str, making sure that only ascii characters are part of the result. Returns: a str with only ASCII chars \"\"\" return self . decode ( \"ascii\" ) def re_match ( self , pattern : str , encoding : str = \"ascii\" ) -> str : \"\"\" Decode this binary value to a string using `encoding` then try to match it to the regular expression `pattern`. If the match is successful, return the decoded string. Raise a `ValueError` otherwise. Args: pattern: the regular expression pattern to match encoding: the encoding to use to decode the binary value to a string Returns: the decoded, matching `str` Raises: ValueError: if the decoded str doesn't match `pattern` \"\"\" res = self . decode ( encoding ) if pattern : if re . match ( pattern , res ): return res raise ValueError ( f \"This value doesn't match pattern { pattern } \" ) return res def text ( self , encoding : str = \"ascii\" ) -> str : \"\"\" Decode this BinaPy to a str, making sure that only printable characters are part of the result. Printable characters are characters from the range `[a-zA-Z0-9!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ ]`. Args: encoding: the encoding to use to decode the binary data Returns: the decoded text \"\"\" return self . re_match ( r '^[a-zA-Z0-9!\"#$%& \\' ()*+,-./:;<=>?@[ \\\\ ]^_`{|}~ ]*$' , encoding ) def urlsafe ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only URL-safe characters are part of the result. Url-safe characters are `[A-Za-z0-9_.\\\\-~]`. Returns: a str with only URL-safe chars \"\"\" return self . re_match ( r \"^[A-Za-z0-9_.\\-~]$\" ) def alphanumeric ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only alphanumeric characters are part of the result. Returns: a str with only alphanumeric chars \"\"\" return self . re_match ( r \"^[a-zA-Z]$\" ) def to_int ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> int : \"\"\" Convert this BinaPy to an `int`. This is a wrapper around [int.from_bytes()](https://docs.python.org/3/library/stdtypes.html#int.from_bytes) and takes the same parameters. Args: byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Default to False. Returns: an integer based on this BinaPy binary value \"\"\" return int . from_bytes ( self , byteorder , signed = signed ) @classmethod def from_binary_string ( cls , s : str , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> \"BinaPy\" : \"\"\" Initializes a BinaPy based on a binary string (containing only 0 and 1). Args: s: a binary string byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a BinaPy \"\"\" return cls ( int ( s , 2 ) . to_bytes (( len ( s ) + 7 ) // 8 , byteorder = byteorder , signed = signed ) ) def to_binary_string ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> str : \"\"\" Returns a string containing this this BinaPy in binary representation. Args: byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a string with containing only 0 and 1 \"\"\" return format ( self . to_int ( byteorder , signed ), \"b\" ) @classmethod def random ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bytes Args: length: number of bytes to generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length )) @classmethod def random_bits ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bits. Same as random(length//8). Length must be a multiple of 8. Args: length: number of bits to randomly generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length // 8 )) @overload def __getitem__ ( self , index : SupportsIndex ) -> int : ... @overload def __getitem__ ( self , slice : slice ) -> \"BinaPy\" : ... def __getitem__ ( self , slice : Union [ slice , SupportsIndex ]) -> \"Union[int, BinaPy]\" : \"\"\" Override the base method so that slicing returns a BinaPy instead of just bytes. Args: slice: a slice or index Returns: A BinaPy \"\"\" if isinstance ( slice , int ): return super () . __getitem__ ( slice ) return self . __class__ ( super () . __getitem__ ( slice )) def char_at ( self , index : int ) -> str : \"\"\" Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Args: index: Returns: the single character at the given index \"\"\" return chr ( self [ index ]) def __add__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to add Returns: a BinaPy \"\"\" return self . __class__ ( super () . __add__ ( other )) def __radd__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that right addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to radd Returns: a BinaPy \"\"\" return self . __class__ ( other . __add__ ( self )) def split ( self , sep : Optional [ bytes ] = None , maxsplit : int = - 1 ) -> \"List[BinaPy]\" : # type: ignore[override] \"\"\" Override base method so that split() returns a BinaPy instead of bytes. Args: sep: a separator maxsplit: the maximum number of splits Returns: a BinaPy \"\"\" return [ self . __class__ ( b ) for b in super () . split ( sep , maxsplit )] def cut_at ( self , * pos : int ) -> \"List[BinaPy]\" : \"\"\" Cut this BinaPy at one or more integer positions. Args: *pos: indexes where to cut the BinaPy Returns: `len(pos) + 1` parts, instances of BinaPy \"\"\" spos = sorted ( pos ) return [ self . __class__ ( self [ start : end ]) for start , end in zip ([ 0 ] + spos , spos + [ len ( self )]) ] extensions : Dict [ str , Dict [ str , Callable [ ... , Any ]]] = {} \"\"\" Extension registry. \"\"\" @classmethod def _get_extension_methods ( cls , name : str ) -> Dict [ str , Callable [ ... , Any ]]: extension = cls . extensions . get ( name ) if extension is None : raise ValueError ( f \"Extension { name } not found\" ) return extension @classmethod def _get_checker ( cls , extension_name : str ) -> Callable [ ... , bool ]: extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"check\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have a checker method\" ) return method @classmethod def _get_decoder ( cls , extension_name : str ) -> \"Callable[..., BinaPy]\" : extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"decode\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have a decode method\" ) return method @classmethod def _get_encoder ( cls , extension_name : str ) -> \"Callable[..., BinaPy]\" : extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"encode\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have an encode method\" ) return method @classmethod def _get_parser ( cls , extension_name : str ) -> Callable [ ... , Any ]: extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"parse\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have a parse method\" ) return method @classmethod def _get_serializer ( cls , extension_name : str ) -> \"Callable[..., BinaPy]\" : extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"serialize\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have a serialize method\" ) return method def encode_to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Encode data from this BinaPy according to the format `name`. Args: name: format to use *args: additional position parameters for the extension encoder method **kwargs: additional keyword parameters for the extension encoder method Returns: the resulting data \"\"\" encoder = self . _get_encoder ( name ) return encoder ( self , * args , ** kwargs ) def to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Alias for `encode_to()`. Args: name: same as `encode_to()` *args: same as `encode_to()` **kwargs: same as `encode_to()` Returns: same as `encode_to()` \"\"\" return self . encode_to ( name , * args , ** kwargs ) def decode_from ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Decode data from this BinaPy according to the format `name`. Args: name: format name to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the resulting data \"\"\" decoder = self . _get_decoder ( name ) return decoder ( self , * args , ** kwargs ) def check ( self , name : str , decode : bool = False , raise_on_error : bool = False ) -> bool : \"\"\" Check that this BinaPy conforms to a given format extension. Args: name: the name of the extension to check decode: if `True`, and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. raise_on_error: if True, Exceptions from the checker method, if any, will be raised instead of returning `False`. Returns: a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. \"\"\" # raises an exception in case the extension doesn't exist self . _get_extension_methods ( name ) try : checker = self . _get_checker ( name ) try : return checker ( self ) except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : try : decoder = self . _get_decoder ( name ) # if checker is not implemented and decode is True, try to decode instead if decode and decoder : try : decoder ( self ) return True except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : return False return False def check_all ( self , decode : bool = False ) -> List [ str ]: \"\"\" Check if this BinaPy conforms to any of the registered format extensions. Returns: a list of format extensions that this BinaPy can be decoded from. Args: decode: if `True`, for extensions that don't have a checker method, try to decode this BinaPy using the decoder method to check if that works. \"\"\" def get_results () -> Iterator [ str ]: for name in self . extensions : success = self . check ( name , decode = decode ) if success is True : yield name return list ( get_results ()) def parse_from ( self , name : str , * args : Any , ** kwargs : Any ) -> Any : \"\"\" Parse data from this BinaPy, based on a given format extension. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the result from parsing this BinaPy \"\"\" parser = self . _get_parser ( name ) return parser ( self , * args , ** kwargs ) @classmethod def serialize_to ( cls , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Serialize (dump) data to a BinaPy, based on a given extension format. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method (which includes the data to serialize) **kwargs: additional keyword parameters for the extension decoder method Returns: a BinaPy, resulting from serialization of the data \"\"\" serializer = cls . _get_serializer ( name ) return serializer ( * args , ** kwargs ) @classmethod def register_extension ( cls , name : str , feature : str , func : Callable [ ... , Any ] ) -> None : ext_dict = cls . extensions . setdefault ( name , {}) ext_dict [ feature ] = func extensions : Dict [ str , Dict [ str , Callable [ ... , Any ]]] = {} \u00b6 Extension registry. __new__ ( cls , value = b '' , encoding = 'utf-8' , errors = 'strict' ) \u00b6 See Also bytes constructor and str.encode() Overrides base method to accept a string with a default encoding of \"utf-8\". Parameters: Name Type Description Default value Union [ bytes , str , int ] a bytes or a str b'' encoding str if value is a str , specifies the encoding to use to encode this str to bytes 'utf-8' errors str 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' 'strict' Source code in binapy\\binapy.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def __new__ ( cls , value : Union [ bytes , str , int ] = b \"\" , encoding : str = \"utf-8\" , errors : str = \"strict\" , ) -> \"BinaPy\" : \"\"\" Overrides base method to accept a string with a default encoding of \"utf-8\". See Also: [`bytes` constructor](https://docs.python.org/3/library/stdtypes.html#bytes) and [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode) Args: value: a `bytes` or a `str` encoding: if value is a `str`, specifies the encoding to use to encode this str to bytes errors: 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' \"\"\" if isinstance ( value , str ): obj = bytes . __new__ ( cls , value , encoding = encoding , errors = errors ) else : obj = bytes . __new__ ( cls , value ) return obj from_int ( cls , i , length = None , byteorder = 'big' , signed = False ) \u00b6 Convert an int to a BinaPy . This is a wrapper around int.to_bytes() and takes the same parameters. Parameters: Name Type Description Default i int the integer to convert to BinaPy required length Optional [ int ] the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. None byteorder Literal ['little', 'big'] \"little\" or \"big\" (defaults to \"big\") 'big' signed bool determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. False Returns: Type Description 'BinaPy' a BinaPy with the binary representation of the given integer Source code in binapy\\binapy.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @classmethod def from_int ( cls , i : int , length : Optional [ int ] = None , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False , ) -> \"BinaPy\" : \"\"\" Convert an `int` to a `BinaPy`. This is a wrapper around [int.to_bytes()](https://docs.python.org/3/library/stdtypes.html#int.to_bytes) and takes the same parameters. Args: i: the integer to convert to BinaPy length: the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Returns: a BinaPy with the binary representation of the given integer \"\"\" if length is None : length = ( i . bit_length () + 7 ) // 8 data = i . to_bytes ( length , byteorder , signed = signed ) return cls ( data ) ascii ( self ) \u00b6 Decode this BinaPy to a str, making sure that only ascii characters are part of the result. Returns: Type Description str a str with only ASCII chars Source code in binapy\\binapy.py 92 93 94 95 96 97 98 99 def ascii ( self ) -> str : \"\"\" Decode this BinaPy to a str, making sure that only ascii characters are part of the result. Returns: a str with only ASCII chars \"\"\" return self . decode ( \"ascii\" ) re_match ( self , pattern , encoding = 'ascii' ) \u00b6 Decode this binary value to a string using encoding then try to match it to the regular expression pattern . If the match is successful, return the decoded string. Raise a ValueError otherwise. Parameters: Name Type Description Default pattern str the regular expression pattern to match required encoding str the encoding to use to decode the binary value to a string 'ascii' Returns: Type Description str the decoded, matching str Raises: Type Description ValueError if the decoded str doesn't match pattern Source code in binapy\\binapy.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def re_match ( self , pattern : str , encoding : str = \"ascii\" ) -> str : \"\"\" Decode this binary value to a string using `encoding` then try to match it to the regular expression `pattern`. If the match is successful, return the decoded string. Raise a `ValueError` otherwise. Args: pattern: the regular expression pattern to match encoding: the encoding to use to decode the binary value to a string Returns: the decoded, matching `str` Raises: ValueError: if the decoded str doesn't match `pattern` \"\"\" res = self . decode ( encoding ) if pattern : if re . match ( pattern , res ): return res raise ValueError ( f \"This value doesn't match pattern { pattern } \" ) return res text ( self , encoding = 'ascii' ) \u00b6 Decode this BinaPy to a str, making sure that only printable characters are part of the result. Printable characters are characters from the range [a-zA-Z0-9!\"#$%&'()*+,-./:;<=>?@[\\]^_ ~ ]`. Parameters: Name Type Description Default encoding str the encoding to use to decode the binary data 'ascii' Returns: Type Description str the decoded text Source code in binapy\\binapy.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 def text ( self , encoding : str = \"ascii\" ) -> str : \"\"\" Decode this BinaPy to a str, making sure that only printable characters are part of the result. Printable characters are characters from the range `[a-zA-Z0-9!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ ]`. Args: encoding: the encoding to use to decode the binary data Returns: the decoded text \"\"\" return self . re_match ( r '^[a-zA-Z0-9!\"#$%& \\' ()*+,-./:;<=>?@[ \\\\ ]^_`{|}~ ]*$' , encoding ) urlsafe ( self ) \u00b6 Convert this BinaPy to a str, making sure that only URL-safe characters are part of the result. Url-safe characters are [A-Za-z0-9_.\\-~] . Returns: Type Description str a str with only URL-safe chars Source code in binapy\\binapy.py 140 141 142 143 144 145 146 147 148 149 def urlsafe ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only URL-safe characters are part of the result. Url-safe characters are `[A-Za-z0-9_.\\\\-~]`. Returns: a str with only URL-safe chars \"\"\" return self . re_match ( r \"^[A-Za-z0-9_.\\-~]$\" ) alphanumeric ( self ) \u00b6 Convert this BinaPy to a str, making sure that only alphanumeric characters are part of the result. Returns: Type Description str a str with only alphanumeric chars Source code in binapy\\binapy.py 151 152 153 154 155 156 157 158 def alphanumeric ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only alphanumeric characters are part of the result. Returns: a str with only alphanumeric chars \"\"\" return self . re_match ( r \"^[a-zA-Z]$\" ) to_int ( self , byteorder = 'big' , signed = False ) \u00b6 Convert this BinaPy to an int . This is a wrapper around int.from_bytes() and takes the same parameters. Parameters: Name Type Description Default byteorder Literal ['little', 'big'] \"little\" or \"big\" (defaults to \"big\") 'big' signed bool determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Default to False. False Returns: Type Description int an integer based on this BinaPy binary value Source code in binapy\\binapy.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 def to_int ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> int : \"\"\" Convert this BinaPy to an `int`. This is a wrapper around [int.from_bytes()](https://docs.python.org/3/library/stdtypes.html#int.from_bytes) and takes the same parameters. Args: byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Default to False. Returns: an integer based on this BinaPy binary value \"\"\" return int . from_bytes ( self , byteorder , signed = signed ) from_binary_string ( cls , s , byteorder = 'big' , signed = False ) \u00b6 Initializes a BinaPy based on a binary string (containing only 0 and 1). Parameters: Name Type Description Default s str a binary string required byteorder Literal ['little', 'big'] byte order to use 'big' signed bool True if 2 complement is used to represent negative values False Returns: Type Description 'BinaPy' a BinaPy Source code in binapy\\binapy.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 @classmethod def from_binary_string ( cls , s : str , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> \"BinaPy\" : \"\"\" Initializes a BinaPy based on a binary string (containing only 0 and 1). Args: s: a binary string byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a BinaPy \"\"\" return cls ( int ( s , 2 ) . to_bytes (( len ( s ) + 7 ) // 8 , byteorder = byteorder , signed = signed ) ) to_binary_string ( self , byteorder = 'big' , signed = False ) \u00b6 Returns a string containing this this BinaPy in binary representation. Parameters: Name Type Description Default byteorder Literal ['little', 'big'] byte order to use 'big' signed bool True if 2 complement is used to represent negative values False Returns: Type Description str a string with containing only 0 and 1 Source code in binapy\\binapy.py 198 199 200 201 202 203 204 205 206 207 208 209 210 211 def to_binary_string ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> str : \"\"\" Returns a string containing this this BinaPy in binary representation. Args: byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a string with containing only 0 and 1 \"\"\" return format ( self . to_int ( byteorder , signed ), \"b\" ) random ( cls , length ) \u00b6 Return a BinaPy containing length random bytes Parameters: Name Type Description Default length int number of bytes to generate required Returns: Type Description 'BinaPy' a BinaPy with randomly generated data Source code in binapy\\binapy.py 213 214 215 216 217 218 219 220 221 222 223 224 @classmethod def random ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bytes Args: length: number of bytes to generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length )) random_bits ( cls , length ) \u00b6 Return a BinaPy containing length random bits. Same as random(length//8). Length must be a multiple of 8. Parameters: Name Type Description Default length int number of bits to randomly generate required Returns: Type Description 'BinaPy' a BinaPy with randomly generated data Source code in binapy\\binapy.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 @classmethod def random_bits ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bits. Same as random(length//8). Length must be a multiple of 8. Args: length: number of bits to randomly generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length // 8 )) __getitem__ ( self , slice ) \u00b6 Override the base method so that slicing returns a BinaPy instead of just bytes. Parameters: Name Type Description Default slice Union [ slice , SupportsIndex ] a slice or index required Returns: Type Description 'Union[int, BinaPy]' A BinaPy Source code in binapy\\binapy.py 249 250 251 252 253 254 255 256 257 258 259 260 261 def __getitem__ ( self , slice : Union [ slice , SupportsIndex ]) -> \"Union[int, BinaPy]\" : \"\"\" Override the base method so that slicing returns a BinaPy instead of just bytes. Args: slice: a slice or index Returns: A BinaPy \"\"\" if isinstance ( slice , int ): return super () . __getitem__ ( slice ) return self . __class__ ( super () . __getitem__ ( slice )) char_at ( self , index ) \u00b6 Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Parameters: Name Type Description Default index int required Returns: Type Description str the single character at the given index Source code in binapy\\binapy.py 263 264 265 266 267 268 269 270 271 272 273 274 275 def char_at ( self , index : int ) -> str : \"\"\" Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Args: index: Returns: the single character at the given index \"\"\" return chr ( self [ index ]) __add__ ( self , other ) \u00b6 Override base method so that addition returns a BinaPy instead of bytes. Parameters: Name Type Description Default other bytes bytes or BinaPy to add required Returns: Type Description 'BinaPy' a BinaPy Source code in binapy\\binapy.py 277 278 279 280 281 282 283 284 285 286 287 def __add__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to add Returns: a BinaPy \"\"\" return self . __class__ ( super () . __add__ ( other )) __radd__ ( self , other ) \u00b6 Override base method so that right addition returns a BinaPy instead of bytes. Parameters: Name Type Description Default other bytes bytes or BinaPy to radd required Returns: Type Description 'BinaPy' a BinaPy Source code in binapy\\binapy.py 289 290 291 292 293 294 295 296 297 298 299 def __radd__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that right addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to radd Returns: a BinaPy \"\"\" return self . __class__ ( other . __add__ ( self )) split ( self , sep = None , maxsplit =- 1 ) \u00b6 Override base method so that split() returns a BinaPy instead of bytes. Parameters: Name Type Description Default sep Optional [ bytes ] a separator None maxsplit int the maximum number of splits -1 Returns: Type Description 'List[BinaPy]' a BinaPy Source code in binapy\\binapy.py 301 302 303 304 305 306 307 308 309 310 311 312 def split ( self , sep : Optional [ bytes ] = None , maxsplit : int = - 1 ) -> \"List[BinaPy]\" : # type: ignore[override] \"\"\" Override base method so that split() returns a BinaPy instead of bytes. Args: sep: a separator maxsplit: the maximum number of splits Returns: a BinaPy \"\"\" return [ self . __class__ ( b ) for b in super () . split ( sep , maxsplit )] cut_at ( self , * pos ) \u00b6 Cut this BinaPy at one or more integer positions. Parameters: Name Type Description Default *pos int indexes where to cut the BinaPy () Returns: Type Description 'List[BinaPy]' len(pos) + 1 parts, instances of BinaPy Source code in binapy\\binapy.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 def cut_at ( self , * pos : int ) -> \"List[BinaPy]\" : \"\"\" Cut this BinaPy at one or more integer positions. Args: *pos: indexes where to cut the BinaPy Returns: `len(pos) + 1` parts, instances of BinaPy \"\"\" spos = sorted ( pos ) return [ self . __class__ ( self [ start : end ]) for start , end in zip ([ 0 ] + spos , spos + [ len ( self )]) ] encode_to ( self , name , * args , ** kwargs ) \u00b6 Encode data from this BinaPy according to the format name . Parameters: Name Type Description Default name str format to use required *args Any additional position parameters for the extension encoder method () **kwargs Any additional keyword parameters for the extension encoder method {} Returns: Type Description 'BinaPy' the resulting data Source code in binapy\\binapy.py 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 def encode_to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Encode data from this BinaPy according to the format `name`. Args: name: format to use *args: additional position parameters for the extension encoder method **kwargs: additional keyword parameters for the extension encoder method Returns: the resulting data \"\"\" encoder = self . _get_encoder ( name ) return encoder ( self , * args , ** kwargs ) to ( self , name , * args , ** kwargs ) \u00b6 Alias for encode_to() . Parameters: Name Type Description Default name str same as encode_to() required *args Any same as encode_to() () **kwargs Any same as encode_to() {} Returns: Type Description 'BinaPy' same as encode_to() Source code in binapy\\binapy.py 404 405 406 407 408 409 410 411 412 413 414 415 416 def to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Alias for `encode_to()`. Args: name: same as `encode_to()` *args: same as `encode_to()` **kwargs: same as `encode_to()` Returns: same as `encode_to()` \"\"\" return self . encode_to ( name , * args , ** kwargs ) decode_from ( self , name , * args , ** kwargs ) \u00b6 Decode data from this BinaPy according to the format name . Parameters: Name Type Description Default name str format name to use required *args Any additional position parameters for the extension decoder method () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description 'BinaPy' the resulting data Source code in binapy\\binapy.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 def decode_from ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Decode data from this BinaPy according to the format `name`. Args: name: format name to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the resulting data \"\"\" decoder = self . _get_decoder ( name ) return decoder ( self , * args , ** kwargs ) check ( self , name , decode = False , raise_on_error = False ) \u00b6 Check that this BinaPy conforms to a given format extension. Parameters: Name Type Description Default name str the name of the extension to check required decode bool if True , and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. False raise_on_error bool if True, Exceptions from the checker method, if any, will be raised instead of returning False . False Returns: Type Description bool a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. Source code in binapy\\binapy.py 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 def check ( self , name : str , decode : bool = False , raise_on_error : bool = False ) -> bool : \"\"\" Check that this BinaPy conforms to a given format extension. Args: name: the name of the extension to check decode: if `True`, and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. raise_on_error: if True, Exceptions from the checker method, if any, will be raised instead of returning `False`. Returns: a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. \"\"\" # raises an exception in case the extension doesn't exist self . _get_extension_methods ( name ) try : checker = self . _get_checker ( name ) try : return checker ( self ) except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : try : decoder = self . _get_decoder ( name ) # if checker is not implemented and decode is True, try to decode instead if decode and decoder : try : decoder ( self ) return True except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : return False return False check_all ( self , decode = False ) \u00b6 Check if this BinaPy conforms to any of the registered format extensions. Returns: Type Description List [ str ] a list of format extensions that this BinaPy can be decoded from. Parameters: Name Type Description Default decode bool if True , for extensions that don't have a checker method, False Source code in binapy\\binapy.py 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 def check_all ( self , decode : bool = False ) -> List [ str ]: \"\"\" Check if this BinaPy conforms to any of the registered format extensions. Returns: a list of format extensions that this BinaPy can be decoded from. Args: decode: if `True`, for extensions that don't have a checker method, try to decode this BinaPy using the decoder method to check if that works. \"\"\" def get_results () -> Iterator [ str ]: for name in self . extensions : success = self . check ( name , decode = decode ) if success is True : yield name return list ( get_results ()) parse_from ( self , name , * args , ** kwargs ) \u00b6 Parse data from this BinaPy, based on a given format extension. Parameters: Name Type Description Default name str name of the extension to use required *args Any additional position parameters for the extension decoder method () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description Any the result from parsing this BinaPy Source code in binapy\\binapy.py 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 def parse_from ( self , name : str , * args : Any , ** kwargs : Any ) -> Any : \"\"\" Parse data from this BinaPy, based on a given format extension. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the result from parsing this BinaPy \"\"\" parser = self . _get_parser ( name ) return parser ( self , * args , ** kwargs ) serialize_to ( cls , name , * args , ** kwargs ) \u00b6 Serialize (dump) data to a BinaPy, based on a given extension format. Parameters: Name Type Description Default name str name of the extension to use required *args Any additional position parameters for the extension decoder method (which includes the data to serialize) () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description 'BinaPy' a BinaPy, resulting from serialization of the data Source code in binapy\\binapy.py 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 @classmethod def serialize_to ( cls , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Serialize (dump) data to a BinaPy, based on a given extension format. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method (which includes the data to serialize) **kwargs: additional keyword parameters for the extension decoder method Returns: a BinaPy, resulting from serialization of the data \"\"\" serializer = cls . _get_serializer ( name ) return serializer ( * args , ** kwargs ) compression \u00b6 encoding \u00b6 parsing \u00b6","title":"API"},{"location":"api/#binapy","text":"Top-level package for BinaPy.","title":"binapy"},{"location":"api/#binapy.binapy","text":"Main module.","title":"binapy"},{"location":"api/#binapy.binapy.BinaPy","text":"This subclass of bytes exposes various binary data manipulation methods. Since this is a bytes subclass, you can use instances of BinaPy anywhere you can use bytes . BinaPy allows (re)encoding of data using encode_to(<format>) , decoding using decode_from(<format>) , parsing using parse_from(<format>) , and serialisation using serialize_to(<format>) . Actual transformations into formats such as Base64, JSON, etc. are implemented using Extensions. Those extensions are registered using the decorators binapy_encoder , binapy_decoder , binapy_checker , binapy_serializer , and binapy_parser . Source code in binapy\\binapy.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 class BinaPy ( bytes ): \"\"\" This subclass of `bytes` exposes various binary data manipulation methods. Since this is a `bytes` subclass, you can use instances of `BinaPy` anywhere you can use `bytes`. BinaPy allows (re)encoding of data using `encode_to(<format>)`, decoding using `decode_from(<format>)`, parsing using `parse_from(<format>)`, and serialisation using `serialize_to(<format>)`. Actual transformations into formats such as Base64, JSON, etc. are implemented using Extensions. Those extensions are registered using the decorators `binapy_encoder`, `binapy_decoder`, `binapy_checker`, `binapy_serializer`, and `binapy_parser`. \"\"\" def __new__ ( cls , value : Union [ bytes , str , int ] = b \"\" , encoding : str = \"utf-8\" , errors : str = \"strict\" , ) -> \"BinaPy\" : \"\"\" Overrides base method to accept a string with a default encoding of \"utf-8\". See Also: [`bytes` constructor](https://docs.python.org/3/library/stdtypes.html#bytes) and [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode) Args: value: a `bytes` or a `str` encoding: if value is a `str`, specifies the encoding to use to encode this str to bytes errors: 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' \"\"\" if isinstance ( value , str ): obj = bytes . __new__ ( cls , value , encoding = encoding , errors = errors ) else : obj = bytes . __new__ ( cls , value ) return obj @classmethod def from_int ( cls , i : int , length : Optional [ int ] = None , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False , ) -> \"BinaPy\" : \"\"\" Convert an `int` to a `BinaPy`. This is a wrapper around [int.to_bytes()](https://docs.python.org/3/library/stdtypes.html#int.to_bytes) and takes the same parameters. Args: i: the integer to convert to BinaPy length: the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Returns: a BinaPy with the binary representation of the given integer \"\"\" if length is None : length = ( i . bit_length () + 7 ) // 8 data = i . to_bytes ( length , byteorder , signed = signed ) return cls ( data ) def ascii ( self ) -> str : \"\"\" Decode this BinaPy to a str, making sure that only ascii characters are part of the result. Returns: a str with only ASCII chars \"\"\" return self . decode ( \"ascii\" ) def re_match ( self , pattern : str , encoding : str = \"ascii\" ) -> str : \"\"\" Decode this binary value to a string using `encoding` then try to match it to the regular expression `pattern`. If the match is successful, return the decoded string. Raise a `ValueError` otherwise. Args: pattern: the regular expression pattern to match encoding: the encoding to use to decode the binary value to a string Returns: the decoded, matching `str` Raises: ValueError: if the decoded str doesn't match `pattern` \"\"\" res = self . decode ( encoding ) if pattern : if re . match ( pattern , res ): return res raise ValueError ( f \"This value doesn't match pattern { pattern } \" ) return res def text ( self , encoding : str = \"ascii\" ) -> str : \"\"\" Decode this BinaPy to a str, making sure that only printable characters are part of the result. Printable characters are characters from the range `[a-zA-Z0-9!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ ]`. Args: encoding: the encoding to use to decode the binary data Returns: the decoded text \"\"\" return self . re_match ( r '^[a-zA-Z0-9!\"#$%& \\' ()*+,-./:;<=>?@[ \\\\ ]^_`{|}~ ]*$' , encoding ) def urlsafe ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only URL-safe characters are part of the result. Url-safe characters are `[A-Za-z0-9_.\\\\-~]`. Returns: a str with only URL-safe chars \"\"\" return self . re_match ( r \"^[A-Za-z0-9_.\\-~]$\" ) def alphanumeric ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only alphanumeric characters are part of the result. Returns: a str with only alphanumeric chars \"\"\" return self . re_match ( r \"^[a-zA-Z]$\" ) def to_int ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> int : \"\"\" Convert this BinaPy to an `int`. This is a wrapper around [int.from_bytes()](https://docs.python.org/3/library/stdtypes.html#int.from_bytes) and takes the same parameters. Args: byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Default to False. Returns: an integer based on this BinaPy binary value \"\"\" return int . from_bytes ( self , byteorder , signed = signed ) @classmethod def from_binary_string ( cls , s : str , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> \"BinaPy\" : \"\"\" Initializes a BinaPy based on a binary string (containing only 0 and 1). Args: s: a binary string byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a BinaPy \"\"\" return cls ( int ( s , 2 ) . to_bytes (( len ( s ) + 7 ) // 8 , byteorder = byteorder , signed = signed ) ) def to_binary_string ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> str : \"\"\" Returns a string containing this this BinaPy in binary representation. Args: byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a string with containing only 0 and 1 \"\"\" return format ( self . to_int ( byteorder , signed ), \"b\" ) @classmethod def random ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bytes Args: length: number of bytes to generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length )) @classmethod def random_bits ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bits. Same as random(length//8). Length must be a multiple of 8. Args: length: number of bits to randomly generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length // 8 )) @overload def __getitem__ ( self , index : SupportsIndex ) -> int : ... @overload def __getitem__ ( self , slice : slice ) -> \"BinaPy\" : ... def __getitem__ ( self , slice : Union [ slice , SupportsIndex ]) -> \"Union[int, BinaPy]\" : \"\"\" Override the base method so that slicing returns a BinaPy instead of just bytes. Args: slice: a slice or index Returns: A BinaPy \"\"\" if isinstance ( slice , int ): return super () . __getitem__ ( slice ) return self . __class__ ( super () . __getitem__ ( slice )) def char_at ( self , index : int ) -> str : \"\"\" Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Args: index: Returns: the single character at the given index \"\"\" return chr ( self [ index ]) def __add__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to add Returns: a BinaPy \"\"\" return self . __class__ ( super () . __add__ ( other )) def __radd__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that right addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to radd Returns: a BinaPy \"\"\" return self . __class__ ( other . __add__ ( self )) def split ( self , sep : Optional [ bytes ] = None , maxsplit : int = - 1 ) -> \"List[BinaPy]\" : # type: ignore[override] \"\"\" Override base method so that split() returns a BinaPy instead of bytes. Args: sep: a separator maxsplit: the maximum number of splits Returns: a BinaPy \"\"\" return [ self . __class__ ( b ) for b in super () . split ( sep , maxsplit )] def cut_at ( self , * pos : int ) -> \"List[BinaPy]\" : \"\"\" Cut this BinaPy at one or more integer positions. Args: *pos: indexes where to cut the BinaPy Returns: `len(pos) + 1` parts, instances of BinaPy \"\"\" spos = sorted ( pos ) return [ self . __class__ ( self [ start : end ]) for start , end in zip ([ 0 ] + spos , spos + [ len ( self )]) ] extensions : Dict [ str , Dict [ str , Callable [ ... , Any ]]] = {} \"\"\" Extension registry. \"\"\" @classmethod def _get_extension_methods ( cls , name : str ) -> Dict [ str , Callable [ ... , Any ]]: extension = cls . extensions . get ( name ) if extension is None : raise ValueError ( f \"Extension { name } not found\" ) return extension @classmethod def _get_checker ( cls , extension_name : str ) -> Callable [ ... , bool ]: extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"check\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have a checker method\" ) return method @classmethod def _get_decoder ( cls , extension_name : str ) -> \"Callable[..., BinaPy]\" : extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"decode\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have a decode method\" ) return method @classmethod def _get_encoder ( cls , extension_name : str ) -> \"Callable[..., BinaPy]\" : extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"encode\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have an encode method\" ) return method @classmethod def _get_parser ( cls , extension_name : str ) -> Callable [ ... , Any ]: extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"parse\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have a parse method\" ) return method @classmethod def _get_serializer ( cls , extension_name : str ) -> \"Callable[..., BinaPy]\" : extension_methods = cls . _get_extension_methods ( extension_name ) method = extension_methods . get ( \"serialize\" ) if method is None : raise ValueError ( f \"Extension { extension_name } doesn't have a serialize method\" ) return method def encode_to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Encode data from this BinaPy according to the format `name`. Args: name: format to use *args: additional position parameters for the extension encoder method **kwargs: additional keyword parameters for the extension encoder method Returns: the resulting data \"\"\" encoder = self . _get_encoder ( name ) return encoder ( self , * args , ** kwargs ) def to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Alias for `encode_to()`. Args: name: same as `encode_to()` *args: same as `encode_to()` **kwargs: same as `encode_to()` Returns: same as `encode_to()` \"\"\" return self . encode_to ( name , * args , ** kwargs ) def decode_from ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Decode data from this BinaPy according to the format `name`. Args: name: format name to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the resulting data \"\"\" decoder = self . _get_decoder ( name ) return decoder ( self , * args , ** kwargs ) def check ( self , name : str , decode : bool = False , raise_on_error : bool = False ) -> bool : \"\"\" Check that this BinaPy conforms to a given format extension. Args: name: the name of the extension to check decode: if `True`, and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. raise_on_error: if True, Exceptions from the checker method, if any, will be raised instead of returning `False`. Returns: a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. \"\"\" # raises an exception in case the extension doesn't exist self . _get_extension_methods ( name ) try : checker = self . _get_checker ( name ) try : return checker ( self ) except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : try : decoder = self . _get_decoder ( name ) # if checker is not implemented and decode is True, try to decode instead if decode and decoder : try : decoder ( self ) return True except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : return False return False def check_all ( self , decode : bool = False ) -> List [ str ]: \"\"\" Check if this BinaPy conforms to any of the registered format extensions. Returns: a list of format extensions that this BinaPy can be decoded from. Args: decode: if `True`, for extensions that don't have a checker method, try to decode this BinaPy using the decoder method to check if that works. \"\"\" def get_results () -> Iterator [ str ]: for name in self . extensions : success = self . check ( name , decode = decode ) if success is True : yield name return list ( get_results ()) def parse_from ( self , name : str , * args : Any , ** kwargs : Any ) -> Any : \"\"\" Parse data from this BinaPy, based on a given format extension. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the result from parsing this BinaPy \"\"\" parser = self . _get_parser ( name ) return parser ( self , * args , ** kwargs ) @classmethod def serialize_to ( cls , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Serialize (dump) data to a BinaPy, based on a given extension format. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method (which includes the data to serialize) **kwargs: additional keyword parameters for the extension decoder method Returns: a BinaPy, resulting from serialization of the data \"\"\" serializer = cls . _get_serializer ( name ) return serializer ( * args , ** kwargs ) @classmethod def register_extension ( cls , name : str , feature : str , func : Callable [ ... , Any ] ) -> None : ext_dict = cls . extensions . setdefault ( name , {}) ext_dict [ feature ] = func","title":"BinaPy"},{"location":"api/#binapy.binapy.BinaPy.extensions","text":"Extension registry.","title":"extensions"},{"location":"api/#binapy.binapy.BinaPy.__new__","text":"See Also bytes constructor and str.encode() Overrides base method to accept a string with a default encoding of \"utf-8\". Parameters: Name Type Description Default value Union [ bytes , str , int ] a bytes or a str b'' encoding str if value is a str , specifies the encoding to use to encode this str to bytes 'utf-8' errors str 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' 'strict' Source code in binapy\\binapy.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def __new__ ( cls , value : Union [ bytes , str , int ] = b \"\" , encoding : str = \"utf-8\" , errors : str = \"strict\" , ) -> \"BinaPy\" : \"\"\" Overrides base method to accept a string with a default encoding of \"utf-8\". See Also: [`bytes` constructor](https://docs.python.org/3/library/stdtypes.html#bytes) and [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode) Args: value: a `bytes` or a `str` encoding: if value is a `str`, specifies the encoding to use to encode this str to bytes errors: 'strict', 'ignore', 'replace', 'xmlcharrefreplace', or 'backslashreplace' \"\"\" if isinstance ( value , str ): obj = bytes . __new__ ( cls , value , encoding = encoding , errors = errors ) else : obj = bytes . __new__ ( cls , value ) return obj","title":"__new__()"},{"location":"api/#binapy.binapy.BinaPy.from_int","text":"Convert an int to a BinaPy . This is a wrapper around int.to_bytes() and takes the same parameters. Parameters: Name Type Description Default i int the integer to convert to BinaPy required length Optional [ int ] the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. None byteorder Literal ['little', 'big'] \"little\" or \"big\" (defaults to \"big\") 'big' signed bool determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. False Returns: Type Description 'BinaPy' a BinaPy with the binary representation of the given integer Source code in binapy\\binapy.py 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @classmethod def from_int ( cls , i : int , length : Optional [ int ] = None , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False , ) -> \"BinaPy\" : \"\"\" Convert an `int` to a `BinaPy`. This is a wrapper around [int.to_bytes()](https://docs.python.org/3/library/stdtypes.html#int.to_bytes) and takes the same parameters. Args: i: the integer to convert to BinaPy length: the length of the integer, in bytes. If omitted, takes the minimal length that fits the given integer. byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Returns: a BinaPy with the binary representation of the given integer \"\"\" if length is None : length = ( i . bit_length () + 7 ) // 8 data = i . to_bytes ( length , byteorder , signed = signed ) return cls ( data )","title":"from_int()"},{"location":"api/#binapy.binapy.BinaPy.ascii","text":"Decode this BinaPy to a str, making sure that only ascii characters are part of the result. Returns: Type Description str a str with only ASCII chars Source code in binapy\\binapy.py 92 93 94 95 96 97 98 99 def ascii ( self ) -> str : \"\"\" Decode this BinaPy to a str, making sure that only ascii characters are part of the result. Returns: a str with only ASCII chars \"\"\" return self . decode ( \"ascii\" )","title":"ascii()"},{"location":"api/#binapy.binapy.BinaPy.re_match","text":"Decode this binary value to a string using encoding then try to match it to the regular expression pattern . If the match is successful, return the decoded string. Raise a ValueError otherwise. Parameters: Name Type Description Default pattern str the regular expression pattern to match required encoding str the encoding to use to decode the binary value to a string 'ascii' Returns: Type Description str the decoded, matching str Raises: Type Description ValueError if the decoded str doesn't match pattern Source code in binapy\\binapy.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def re_match ( self , pattern : str , encoding : str = \"ascii\" ) -> str : \"\"\" Decode this binary value to a string using `encoding` then try to match it to the regular expression `pattern`. If the match is successful, return the decoded string. Raise a `ValueError` otherwise. Args: pattern: the regular expression pattern to match encoding: the encoding to use to decode the binary value to a string Returns: the decoded, matching `str` Raises: ValueError: if the decoded str doesn't match `pattern` \"\"\" res = self . decode ( encoding ) if pattern : if re . match ( pattern , res ): return res raise ValueError ( f \"This value doesn't match pattern { pattern } \" ) return res","title":"re_match()"},{"location":"api/#binapy.binapy.BinaPy.text","text":"Decode this BinaPy to a str, making sure that only printable characters are part of the result. Printable characters are characters from the range [a-zA-Z0-9!\"#$%&'()*+,-./:;<=>?@[\\]^_ ~ ]`. Parameters: Name Type Description Default encoding str the encoding to use to decode the binary data 'ascii' Returns: Type Description str the decoded text Source code in binapy\\binapy.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 def text ( self , encoding : str = \"ascii\" ) -> str : \"\"\" Decode this BinaPy to a str, making sure that only printable characters are part of the result. Printable characters are characters from the range `[a-zA-Z0-9!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~ ]`. Args: encoding: the encoding to use to decode the binary data Returns: the decoded text \"\"\" return self . re_match ( r '^[a-zA-Z0-9!\"#$%& \\' ()*+,-./:;<=>?@[ \\\\ ]^_`{|}~ ]*$' , encoding )","title":"text()"},{"location":"api/#binapy.binapy.BinaPy.urlsafe","text":"Convert this BinaPy to a str, making sure that only URL-safe characters are part of the result. Url-safe characters are [A-Za-z0-9_.\\-~] . Returns: Type Description str a str with only URL-safe chars Source code in binapy\\binapy.py 140 141 142 143 144 145 146 147 148 149 def urlsafe ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only URL-safe characters are part of the result. Url-safe characters are `[A-Za-z0-9_.\\\\-~]`. Returns: a str with only URL-safe chars \"\"\" return self . re_match ( r \"^[A-Za-z0-9_.\\-~]$\" )","title":"urlsafe()"},{"location":"api/#binapy.binapy.BinaPy.alphanumeric","text":"Convert this BinaPy to a str, making sure that only alphanumeric characters are part of the result. Returns: Type Description str a str with only alphanumeric chars Source code in binapy\\binapy.py 151 152 153 154 155 156 157 158 def alphanumeric ( self ) -> str : \"\"\" Convert this BinaPy to a str, making sure that only alphanumeric characters are part of the result. Returns: a str with only alphanumeric chars \"\"\" return self . re_match ( r \"^[a-zA-Z]$\" )","title":"alphanumeric()"},{"location":"api/#binapy.binapy.BinaPy.to_int","text":"Convert this BinaPy to an int . This is a wrapper around int.from_bytes() and takes the same parameters. Parameters: Name Type Description Default byteorder Literal ['little', 'big'] \"little\" or \"big\" (defaults to \"big\") 'big' signed bool determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Default to False. False Returns: Type Description int an integer based on this BinaPy binary value Source code in binapy\\binapy.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 def to_int ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> int : \"\"\" Convert this BinaPy to an `int`. This is a wrapper around [int.from_bytes()](https://docs.python.org/3/library/stdtypes.html#int.from_bytes) and takes the same parameters. Args: byteorder: \"little\" or \"big\" (defaults to \"big\") signed: determines whether two\u00e2\u20ac\u2122s complement is used to represent the integer. Default to False. Returns: an integer based on this BinaPy binary value \"\"\" return int . from_bytes ( self , byteorder , signed = signed )","title":"to_int()"},{"location":"api/#binapy.binapy.BinaPy.from_binary_string","text":"Initializes a BinaPy based on a binary string (containing only 0 and 1). Parameters: Name Type Description Default s str a binary string required byteorder Literal ['little', 'big'] byte order to use 'big' signed bool True if 2 complement is used to represent negative values False Returns: Type Description 'BinaPy' a BinaPy Source code in binapy\\binapy.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 @classmethod def from_binary_string ( cls , s : str , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> \"BinaPy\" : \"\"\" Initializes a BinaPy based on a binary string (containing only 0 and 1). Args: s: a binary string byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a BinaPy \"\"\" return cls ( int ( s , 2 ) . to_bytes (( len ( s ) + 7 ) // 8 , byteorder = byteorder , signed = signed ) )","title":"from_binary_string()"},{"location":"api/#binapy.binapy.BinaPy.to_binary_string","text":"Returns a string containing this this BinaPy in binary representation. Parameters: Name Type Description Default byteorder Literal ['little', 'big'] byte order to use 'big' signed bool True if 2 complement is used to represent negative values False Returns: Type Description str a string with containing only 0 and 1 Source code in binapy\\binapy.py 198 199 200 201 202 203 204 205 206 207 208 209 210 211 def to_binary_string ( self , byteorder : Literal [ \"little\" , \"big\" ] = \"big\" , signed : bool = False ) -> str : \"\"\" Returns a string containing this this BinaPy in binary representation. Args: byteorder: byte order to use signed: True if 2 complement is used to represent negative values Returns: a string with containing only 0 and 1 \"\"\" return format ( self . to_int ( byteorder , signed ), \"b\" )","title":"to_binary_string()"},{"location":"api/#binapy.binapy.BinaPy.random","text":"Return a BinaPy containing length random bytes Parameters: Name Type Description Default length int number of bytes to generate required Returns: Type Description 'BinaPy' a BinaPy with randomly generated data Source code in binapy\\binapy.py 213 214 215 216 217 218 219 220 221 222 223 224 @classmethod def random ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bytes Args: length: number of bytes to generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length ))","title":"random()"},{"location":"api/#binapy.binapy.BinaPy.random_bits","text":"Return a BinaPy containing length random bits. Same as random(length//8). Length must be a multiple of 8. Parameters: Name Type Description Default length int number of bits to randomly generate required Returns: Type Description 'BinaPy' a BinaPy with randomly generated data Source code in binapy\\binapy.py 226 227 228 229 230 231 232 233 234 235 236 237 238 239 @classmethod def random_bits ( cls , length : int ) -> \"BinaPy\" : \"\"\" Return a BinaPy containing `length` random bits. Same as random(length//8). Length must be a multiple of 8. Args: length: number of bits to randomly generate Returns: a BinaPy with randomly generated data \"\"\" return cls ( secrets . token_bytes ( length // 8 ))","title":"random_bits()"},{"location":"api/#binapy.binapy.BinaPy.__getitem__","text":"Override the base method so that slicing returns a BinaPy instead of just bytes. Parameters: Name Type Description Default slice Union [ slice , SupportsIndex ] a slice or index required Returns: Type Description 'Union[int, BinaPy]' A BinaPy Source code in binapy\\binapy.py 249 250 251 252 253 254 255 256 257 258 259 260 261 def __getitem__ ( self , slice : Union [ slice , SupportsIndex ]) -> \"Union[int, BinaPy]\" : \"\"\" Override the base method so that slicing returns a BinaPy instead of just bytes. Args: slice: a slice or index Returns: A BinaPy \"\"\" if isinstance ( slice , int ): return super () . __getitem__ ( slice ) return self . __class__ ( super () . __getitem__ ( slice ))","title":"__getitem__()"},{"location":"api/#binapy.binapy.BinaPy.char_at","text":"Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Parameters: Name Type Description Default index int required Returns: Type Description str the single character at the given index Source code in binapy\\binapy.py 263 264 265 266 267 268 269 270 271 272 273 274 275 def char_at ( self , index : int ) -> str : \"\"\" Return the character at the given index. Slicing a standard bytes returns an int. Sometimes what you really want is a single char string. Args: index: Returns: the single character at the given index \"\"\" return chr ( self [ index ])","title":"char_at()"},{"location":"api/#binapy.binapy.BinaPy.__add__","text":"Override base method so that addition returns a BinaPy instead of bytes. Parameters: Name Type Description Default other bytes bytes or BinaPy to add required Returns: Type Description 'BinaPy' a BinaPy Source code in binapy\\binapy.py 277 278 279 280 281 282 283 284 285 286 287 def __add__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to add Returns: a BinaPy \"\"\" return self . __class__ ( super () . __add__ ( other ))","title":"__add__()"},{"location":"api/#binapy.binapy.BinaPy.__radd__","text":"Override base method so that right addition returns a BinaPy instead of bytes. Parameters: Name Type Description Default other bytes bytes or BinaPy to radd required Returns: Type Description 'BinaPy' a BinaPy Source code in binapy\\binapy.py 289 290 291 292 293 294 295 296 297 298 299 def __radd__ ( self , other : bytes ) -> \"BinaPy\" : \"\"\" Override base method so that right addition returns a BinaPy instead of bytes. Args: other: bytes or BinaPy to radd Returns: a BinaPy \"\"\" return self . __class__ ( other . __add__ ( self ))","title":"__radd__()"},{"location":"api/#binapy.binapy.BinaPy.split","text":"Override base method so that split() returns a BinaPy instead of bytes. Parameters: Name Type Description Default sep Optional [ bytes ] a separator None maxsplit int the maximum number of splits -1 Returns: Type Description 'List[BinaPy]' a BinaPy Source code in binapy\\binapy.py 301 302 303 304 305 306 307 308 309 310 311 312 def split ( self , sep : Optional [ bytes ] = None , maxsplit : int = - 1 ) -> \"List[BinaPy]\" : # type: ignore[override] \"\"\" Override base method so that split() returns a BinaPy instead of bytes. Args: sep: a separator maxsplit: the maximum number of splits Returns: a BinaPy \"\"\" return [ self . __class__ ( b ) for b in super () . split ( sep , maxsplit )]","title":"split()"},{"location":"api/#binapy.binapy.BinaPy.cut_at","text":"Cut this BinaPy at one or more integer positions. Parameters: Name Type Description Default *pos int indexes where to cut the BinaPy () Returns: Type Description 'List[BinaPy]' len(pos) + 1 parts, instances of BinaPy Source code in binapy\\binapy.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 def cut_at ( self , * pos : int ) -> \"List[BinaPy]\" : \"\"\" Cut this BinaPy at one or more integer positions. Args: *pos: indexes where to cut the BinaPy Returns: `len(pos) + 1` parts, instances of BinaPy \"\"\" spos = sorted ( pos ) return [ self . __class__ ( self [ start : end ]) for start , end in zip ([ 0 ] + spos , spos + [ len ( self )]) ]","title":"cut_at()"},{"location":"api/#binapy.binapy.BinaPy.encode_to","text":"Encode data from this BinaPy according to the format name . Parameters: Name Type Description Default name str format to use required *args Any additional position parameters for the extension encoder method () **kwargs Any additional keyword parameters for the extension encoder method {} Returns: Type Description 'BinaPy' the resulting data Source code in binapy\\binapy.py 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 def encode_to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Encode data from this BinaPy according to the format `name`. Args: name: format to use *args: additional position parameters for the extension encoder method **kwargs: additional keyword parameters for the extension encoder method Returns: the resulting data \"\"\" encoder = self . _get_encoder ( name ) return encoder ( self , * args , ** kwargs )","title":"encode_to()"},{"location":"api/#binapy.binapy.BinaPy.to","text":"Alias for encode_to() . Parameters: Name Type Description Default name str same as encode_to() required *args Any same as encode_to() () **kwargs Any same as encode_to() {} Returns: Type Description 'BinaPy' same as encode_to() Source code in binapy\\binapy.py 404 405 406 407 408 409 410 411 412 413 414 415 416 def to ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Alias for `encode_to()`. Args: name: same as `encode_to()` *args: same as `encode_to()` **kwargs: same as `encode_to()` Returns: same as `encode_to()` \"\"\" return self . encode_to ( name , * args , ** kwargs )","title":"to()"},{"location":"api/#binapy.binapy.BinaPy.decode_from","text":"Decode data from this BinaPy according to the format name . Parameters: Name Type Description Default name str format name to use required *args Any additional position parameters for the extension decoder method () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description 'BinaPy' the resulting data Source code in binapy\\binapy.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 def decode_from ( self , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Decode data from this BinaPy according to the format `name`. Args: name: format name to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the resulting data \"\"\" decoder = self . _get_decoder ( name ) return decoder ( self , * args , ** kwargs )","title":"decode_from()"},{"location":"api/#binapy.binapy.BinaPy.check","text":"Check that this BinaPy conforms to a given format extension. Parameters: Name Type Description Default name str the name of the extension to check required decode bool if True , and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. False raise_on_error bool if True, Exceptions from the checker method, if any, will be raised instead of returning False . False Returns: Type Description bool a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. Source code in binapy\\binapy.py 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 def check ( self , name : str , decode : bool = False , raise_on_error : bool = False ) -> bool : \"\"\" Check that this BinaPy conforms to a given format extension. Args: name: the name of the extension to check decode: if `True`, and the given extension doesn't have a checker method, try to decode this BinaPy using the decoder method to check if that works. raise_on_error: if True, Exceptions from the checker method, if any, will be raised instead of returning `False`. Returns: a boolean, that is True if this BinaPy conforms to the given extension format, False otherwise. \"\"\" # raises an exception in case the extension doesn't exist self . _get_extension_methods ( name ) try : checker = self . _get_checker ( name ) try : return checker ( self ) except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : try : decoder = self . _get_decoder ( name ) # if checker is not implemented and decode is True, try to decode instead if decode and decoder : try : decoder ( self ) return True except Exception as exc : if raise_on_error : raise exc from exc return False except ValueError : return False return False","title":"check()"},{"location":"api/#binapy.binapy.BinaPy.check_all","text":"Check if this BinaPy conforms to any of the registered format extensions. Returns: Type Description List [ str ] a list of format extensions that this BinaPy can be decoded from. Parameters: Name Type Description Default decode bool if True , for extensions that don't have a checker method, False Source code in binapy\\binapy.py 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 def check_all ( self , decode : bool = False ) -> List [ str ]: \"\"\" Check if this BinaPy conforms to any of the registered format extensions. Returns: a list of format extensions that this BinaPy can be decoded from. Args: decode: if `True`, for extensions that don't have a checker method, try to decode this BinaPy using the decoder method to check if that works. \"\"\" def get_results () -> Iterator [ str ]: for name in self . extensions : success = self . check ( name , decode = decode ) if success is True : yield name return list ( get_results ())","title":"check_all()"},{"location":"api/#binapy.binapy.BinaPy.parse_from","text":"Parse data from this BinaPy, based on a given format extension. Parameters: Name Type Description Default name str name of the extension to use required *args Any additional position parameters for the extension decoder method () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description Any the result from parsing this BinaPy Source code in binapy\\binapy.py 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 def parse_from ( self , name : str , * args : Any , ** kwargs : Any ) -> Any : \"\"\" Parse data from this BinaPy, based on a given format extension. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method **kwargs: additional keyword parameters for the extension decoder method Returns: the result from parsing this BinaPy \"\"\" parser = self . _get_parser ( name ) return parser ( self , * args , ** kwargs )","title":"parse_from()"},{"location":"api/#binapy.binapy.BinaPy.serialize_to","text":"Serialize (dump) data to a BinaPy, based on a given extension format. Parameters: Name Type Description Default name str name of the extension to use required *args Any additional position parameters for the extension decoder method (which includes the data to serialize) () **kwargs Any additional keyword parameters for the extension decoder method {} Returns: Type Description 'BinaPy' a BinaPy, resulting from serialization of the data Source code in binapy\\binapy.py 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 @classmethod def serialize_to ( cls , name : str , * args : Any , ** kwargs : Any ) -> \"BinaPy\" : \"\"\" Serialize (dump) data to a BinaPy, based on a given extension format. Args: name: name of the extension to use *args: additional position parameters for the extension decoder method (which includes the data to serialize) **kwargs: additional keyword parameters for the extension decoder method Returns: a BinaPy, resulting from serialization of the data \"\"\" serializer = cls . _get_serializer ( name ) return serializer ( * args , ** kwargs )","title":"serialize_to()"},{"location":"api/#binapy.compression","text":"","title":"compression"},{"location":"api/#binapy.encoding","text":"","title":"encoding"},{"location":"api/#binapy.parsing","text":"","title":"parsing"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Guillaume Pujol guill.p.linux@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Guillaume Pujol guill.p.linux@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/guillp/binapy/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 BinaPy could always use more documentation, whether as part of the official BinaPy docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/guillp/binapy/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up binapy for local development. Fork the binapy repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/binapy.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/guillp/binapy/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 To run a subset of tests, here only those from test_binapy : 1 $ pytest tests.test_binapy Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/guillp/binapy/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"BinaPy could always use more documentation, whether as part of the official BinaPy docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/guillp/binapy/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up binapy for local development. Fork the binapy repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/binapy.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/guillp/binapy/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"To run a subset of tests, here only those from test_binapy : 1 $ pytest tests.test_binapy","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.3.0 (2021-11-15) \u00b6 Renaming serialize_from() to serialize_to() and parse_to() to parse_from() . 0.2.0 (2021-11-10) \u00b6 Serialize JSON as compact by default datetime instances are serialized to epoch timestamps when serializing JSON (but they are not converted back on parsing). add .to_int() to convert a BinaPy to an int. 0.1.0 (2021-07-08) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#030-2021-11-15","text":"Renaming serialize_from() to serialize_to() and parse_to() to parse_from() .","title":"0.3.0 (2021-11-15)"},{"location":"history/#020-2021-11-10","text":"Serialize JSON as compact by default datetime instances are serialized to epoch timestamps when serializing JSON (but they are not converted back on parsing). add .to_int() to convert a BinaPy to an int.","title":"0.2.0 (2021-11-10)"},{"location":"history/#010-2021-07-08","text":"First release on PyPI.","title":"0.1.0 (2021-07-08)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install BinaPy, run this command in your terminal: 1 $ pip install binapy This is the preferred method to install BinaPy, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for BinaPy can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/guillp/binapy Or download the tarball : 1 $ curl -OJL https://github.com/guillp/binapy/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install BinaPy, run this command in your terminal: 1 $ pip install binapy This is the preferred method to install BinaPy, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for BinaPy can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/guillp/binapy Or download the tarball : 1 $ curl -OJL https://github.com/guillp/binapy/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 Import \u00b6 To use BinaPy in a project, import the main class like this: 1 from binapy import BinaPy BinaPy is a subclass of Python's built-in bytes , so you can use it anywhere a bytes is required. You may also .decode() it to convert it to a str , or use any of the default methods from bytes It also provides a few additional convenience methods, such as cut_at(*pos) , .ascii() , etc. Initialize \u00b6 To initialize a BinaPy : from a bytes : bp = BinaPy(b'my raw bytes \\x01\\xcf' ) from a str : bp = BinaPy(\"my string\", encoding='cp1252') . If encoding is omitted, it will default to 'utf-8' . That is a different to the bytes constructor where encoding is mandatory when you give it a str as value. from a bytearray : bp = BinaPy(bytearray(b'my bytearray data')) from an int array: bp = BinaPy([109, 121, 32, 105, 110, 116, 32, 97, 114, 114, 97, 121]) from an int : bp = BinaPy.from_int(82412341) . You may additionally pass size , order , and signed parameters, with the same semantics as int.to_bytes((length, byteorder, signed=False) . You can do the opposite and convert an BinaPy to an int with bp.to_int() . with random data, of arbitrary size: bp = BinaPy.random(32) . The parameter is the size of the generated data, in bytes. from a string containing the binary representation of your data: bp = BinaPy.from_binary_string('101010') . The reverse transformation is available with bp.to_binary_string() . Encoding / Decoding / Transformations \u00b6 Use the methods encode_to() (or its alias .to() ) and decode_from() to transform a BinaPy value into another, using an encoding or transformation scheme. The result value being a BinaPy, you can keep applying those transformations fluently. For example, to generate a random binary data, hash it with SHA256 then Base64-url encode the result: 1 2 3 bp = BinaPy . random ( 128 ) . to ( \"sha256\" ) . encode_to ( \"b64u\" ) print ( bp ) # b'QTs64tuMZ-TnyYPhjopIryaFPeF26SKKN4y-su2sBYg' To illustrate the .decode_from() method, lets Base64-url decode this value and convert it to hex: 1 2 print ( bp . decode_from ( \"b64u\" ) . to ( \"hex\" )) # b'413b3ae2db8c67e4e7c983e18e8a48af26853de176e9228a378cbeb2edac0588' A few noteworthy remarks: some transformations, such as hashes, are irreversible, so they can only be used with the encode_to() method. the verb encode is not really suitable for hashes. That's one of the 2 reasons the .to() alias exists. The other reason is that it's shorter :) there is no from() alias to decode_from() . That's because from is a reversed word in Python, so it cannot be used as a method name. from_() could be used but it makes the code much uglier than decode_from() . Converting from binary to text or numeric data types \u00b6 BinaPy has a few convenience methods to convert a binary data into: a string: you can use .decode() as usual, with any Python-supported encoding as parameter. However, very often you will want to have a limited set of characters in the result. You can check this by using .ascii() , .text() , .urlsafe() , .alphanumeric() an integer: use .to_int() , with optional parameters byteorder and signed with the same semantics as int.from_bytes . a binary string: use .to_binary_string() . Checking data contents \u00b6 You can check if a BinaPy data conforms with a given extension using the .check(name) method. 1 2 3 4 5 bp = BinaPy ( b \"ThisIsData==\" ) bp . check ( \"b64\" ) # True bp . check ( \"hex\" ) # False You can also check a BinaPy against all extensions using .check_all() . For example, any random 20 bytes could be the result from a SHA1 hash: 1 2 3 bp = BinaPy . random ( 20 ) bp . check_all () # ['sha1'] While a given string with only hex characters could be a hexadecimal string, it could also be the result of a base64 or a base64url encoding. 1 2 3 4 bp = BinaPy ( \"abcdef1234567890\" ) bp . check_all () # ['b64', 'b64u', 'hex'] # ['b64', 'b64u', 'hex'] Loading and dumping \u00b6 Dumping and encoding data can be done this way: 1 2 BinaPy . serialize_to ( \"json\" , { \"foo\" : \"bar\" }) . to ( \"b64u\" ) # b'ewoiZm9vIjogImJhciIKfQ' Loading serialized and encoded data can be done this way: 1 2 BinaPy ( b \"ewoiZm9vIjogImJhciIKfQ\" ) . decode_from ( \"b64u\" ) . parse_from ( \"json\" ) # {'foo': 'bar'} extend \u00b6 You can implement additional methods for BinaPy. Methods can implement one or several of the following features: an encoder : this will transform/encode the current BinaPy into another BinaPy. E.g., a base64 encoder will transform arbitrary binary data into a base64 encoded string. a decoder : this will transform an encoded data back into its initial data. E.g., a base64 decoder. a checker : this will check if a given data conforms to a given format. Which means that this data could have been produced with a matching encoder and can probably be decoded with the matching decoder , if available. a parser : this will parse the current BinaPy data into another format. E.g., a JSON parser a serializer : this will serialize data from another format into a BinaPy. E.g, a JSON dumper Note that the terms encode and decode are quite loose, because they are applied to compression, hashing and other transformations that produce or consume binary data. To implement such a method, use one of the binapy_<feature>() decorators. Each decorator takes the name of the extension as parameter. 1 2 3 4 5 6 7 from binapy import binapy_encoder @binapy_encoder ( \"myformat\" ) def encode_myformat ( bp ) -> bytes : # apply your transformation return my_transformation ( bp ) This binapy_encoder() decorator will: register this method in BinaPy extension registry, so that it can be called with BinaPy(my_data).encode_to('myformat') . if that methods returns a bytes or a bytesarray , make sure that it returns a BinaPy instead, to make sure it is fluent. Some formats such as base64 can have all 3 methods implemented. Others such as hashes only have an encoder and a checker method: the encoder does the actual hashing (that is, by definition, irreversible) the checker method checks that a given data is the appropriate length for the given hash Finally, some formats like gzip do not have a checker method, because trying to decode the data is faster and easier than validating it statically. BinaPy will then try the decode method instead and see if it raises an Exception.","title":"usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#import","text":"To use BinaPy in a project, import the main class like this: 1 from binapy import BinaPy BinaPy is a subclass of Python's built-in bytes , so you can use it anywhere a bytes is required. You may also .decode() it to convert it to a str , or use any of the default methods from bytes It also provides a few additional convenience methods, such as cut_at(*pos) , .ascii() , etc.","title":"Import"},{"location":"usage/#initialize","text":"To initialize a BinaPy : from a bytes : bp = BinaPy(b'my raw bytes \\x01\\xcf' ) from a str : bp = BinaPy(\"my string\", encoding='cp1252') . If encoding is omitted, it will default to 'utf-8' . That is a different to the bytes constructor where encoding is mandatory when you give it a str as value. from a bytearray : bp = BinaPy(bytearray(b'my bytearray data')) from an int array: bp = BinaPy([109, 121, 32, 105, 110, 116, 32, 97, 114, 114, 97, 121]) from an int : bp = BinaPy.from_int(82412341) . You may additionally pass size , order , and signed parameters, with the same semantics as int.to_bytes((length, byteorder, signed=False) . You can do the opposite and convert an BinaPy to an int with bp.to_int() . with random data, of arbitrary size: bp = BinaPy.random(32) . The parameter is the size of the generated data, in bytes. from a string containing the binary representation of your data: bp = BinaPy.from_binary_string('101010') . The reverse transformation is available with bp.to_binary_string() .","title":"Initialize"},{"location":"usage/#encoding--decoding--transformations","text":"Use the methods encode_to() (or its alias .to() ) and decode_from() to transform a BinaPy value into another, using an encoding or transformation scheme. The result value being a BinaPy, you can keep applying those transformations fluently. For example, to generate a random binary data, hash it with SHA256 then Base64-url encode the result: 1 2 3 bp = BinaPy . random ( 128 ) . to ( \"sha256\" ) . encode_to ( \"b64u\" ) print ( bp ) # b'QTs64tuMZ-TnyYPhjopIryaFPeF26SKKN4y-su2sBYg' To illustrate the .decode_from() method, lets Base64-url decode this value and convert it to hex: 1 2 print ( bp . decode_from ( \"b64u\" ) . to ( \"hex\" )) # b'413b3ae2db8c67e4e7c983e18e8a48af26853de176e9228a378cbeb2edac0588' A few noteworthy remarks: some transformations, such as hashes, are irreversible, so they can only be used with the encode_to() method. the verb encode is not really suitable for hashes. That's one of the 2 reasons the .to() alias exists. The other reason is that it's shorter :) there is no from() alias to decode_from() . That's because from is a reversed word in Python, so it cannot be used as a method name. from_() could be used but it makes the code much uglier than decode_from() .","title":"Encoding / Decoding / Transformations"},{"location":"usage/#converting-from-binary-to-text-or-numeric-data-types","text":"BinaPy has a few convenience methods to convert a binary data into: a string: you can use .decode() as usual, with any Python-supported encoding as parameter. However, very often you will want to have a limited set of characters in the result. You can check this by using .ascii() , .text() , .urlsafe() , .alphanumeric() an integer: use .to_int() , with optional parameters byteorder and signed with the same semantics as int.from_bytes . a binary string: use .to_binary_string() .","title":"Converting from binary to text or numeric data types"},{"location":"usage/#checking-data-contents","text":"You can check if a BinaPy data conforms with a given extension using the .check(name) method. 1 2 3 4 5 bp = BinaPy ( b \"ThisIsData==\" ) bp . check ( \"b64\" ) # True bp . check ( \"hex\" ) # False You can also check a BinaPy against all extensions using .check_all() . For example, any random 20 bytes could be the result from a SHA1 hash: 1 2 3 bp = BinaPy . random ( 20 ) bp . check_all () # ['sha1'] While a given string with only hex characters could be a hexadecimal string, it could also be the result of a base64 or a base64url encoding. 1 2 3 4 bp = BinaPy ( \"abcdef1234567890\" ) bp . check_all () # ['b64', 'b64u', 'hex'] # ['b64', 'b64u', 'hex']","title":"Checking data contents"},{"location":"usage/#loading-and-dumping","text":"Dumping and encoding data can be done this way: 1 2 BinaPy . serialize_to ( \"json\" , { \"foo\" : \"bar\" }) . to ( \"b64u\" ) # b'ewoiZm9vIjogImJhciIKfQ' Loading serialized and encoded data can be done this way: 1 2 BinaPy ( b \"ewoiZm9vIjogImJhciIKfQ\" ) . decode_from ( \"b64u\" ) . parse_from ( \"json\" ) # {'foo': 'bar'}","title":"Loading and dumping"},{"location":"usage/#extend","text":"You can implement additional methods for BinaPy. Methods can implement one or several of the following features: an encoder : this will transform/encode the current BinaPy into another BinaPy. E.g., a base64 encoder will transform arbitrary binary data into a base64 encoded string. a decoder : this will transform an encoded data back into its initial data. E.g., a base64 decoder. a checker : this will check if a given data conforms to a given format. Which means that this data could have been produced with a matching encoder and can probably be decoded with the matching decoder , if available. a parser : this will parse the current BinaPy data into another format. E.g., a JSON parser a serializer : this will serialize data from another format into a BinaPy. E.g, a JSON dumper Note that the terms encode and decode are quite loose, because they are applied to compression, hashing and other transformations that produce or consume binary data. To implement such a method, use one of the binapy_<feature>() decorators. Each decorator takes the name of the extension as parameter. 1 2 3 4 5 6 7 from binapy import binapy_encoder @binapy_encoder ( \"myformat\" ) def encode_myformat ( bp ) -> bytes : # apply your transformation return my_transformation ( bp ) This binapy_encoder() decorator will: register this method in BinaPy extension registry, so that it can be called with BinaPy(my_data).encode_to('myformat') . if that methods returns a bytes or a bytesarray , make sure that it returns a BinaPy instead, to make sure it is fluent. Some formats such as base64 can have all 3 methods implemented. Others such as hashes only have an encoder and a checker method: the encoder does the actual hashing (that is, by definition, irreversible) the checker method checks that a given data is the appropriate length for the given hash Finally, some formats like gzip do not have a checker method, because trying to decode the data is faster and easier than validating it statically. BinaPy will then try the decode method instead and see if it raises an Exception.","title":"extend"}]}